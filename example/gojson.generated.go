// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY go-fish/gojson.
// ************************************************************

package example

import (
	json "encoding/json"
	fmt "fmt"

	backend "github.com/go-fish/gojson/backend"
	test "github.com/go-fish/gojson/example/test"
)

func (e *ExampleStruct) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keye79z58iw, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keye79z58iw {
			case "testInt":
				var value8h03yozt int16

				value8h03yozt, err = dec.ReadInt16()
				if err != nil {
					return err
				}

				e.TestInt = value8h03yozt

			case "testAlias":
				var value8jefhkr1 *StringType1

				if dec.AssertNull() {
					value8jefhkr1 = nil
				} else {
					if value8jefhkr1 == nil {
						value8jefhkr1 = new(StringType1)
					}

					var argvaxcysncz string

					argvaxcysncz, err = dec.ReadString()
					if err != nil {
						return err
					}

					*value8jefhkr1 = StringType1(StringType(argvaxcysncz))
				}

				e.TestAlias = value8jefhkr1

			case "testAliasMap":
				var value3nbjjzoc map[string]AliasMap

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if isNil {
					value3nbjjzoc = nil
				} else {
					value3nbjjzoc = make(map[string]AliasMap)

					for {
						var key7s07of3m string

						key7s07of3m, err = dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						var valuealp9d4xf AliasMap

						var argvhduyylsu map[StringType]AliasTypeStruct

						if isNil, err := dec.AssertObject(); err != nil {
							return err
						} else if isNil {
							argvhduyylsu = nil
						} else {
							argvhduyylsu = make(map[StringType]AliasTypeStruct)

							for {
								var keycddb9m17 StringType

								var argvq5wt3k73 string

								argvq5wt3k73, err = dec.ReadString()
								if err != nil {
									return err
								}

								keycddb9m17 = StringType(argvq5wt3k73)

								if err := dec.MustByte(':'); err != nil {
									return err
								}

								var value0e7hf5ny AliasTypeStruct

								if isNil, err := dec.AssertObject(); err != nil {
									return err
								} else if !isNil {
									for {
										keyd9nl3u4m, err := dec.ReadString()
										if err != nil {
											return err
										}

										if err := dec.MustByte(':'); err != nil {
											return err
										}

										switch keyd9nl3u4m {
										case "testBoolStruct":
											if value0e7hf5ny.TestPtrStruct == nil {
												value0e7hf5ny.TestPtrStruct = new(TestPtrStruct)
											}

											var valuekg0zd399 TestBoolStruct

											if isNil, err := dec.AssertObject(); err != nil {
												return err
											} else if !isNil {
												for {
													keyid0vm38d, err := dec.ReadString()
													if err != nil {
														return err
													}

													if err := dec.MustByte(':'); err != nil {
														return err
													}

													switch keyid0vm38d {
													case "testBool":
														var valueve7lgvpn bool

														valueve7lgvpn, err = dec.ReadBool()
														if err != nil {
															return err
														}

														valuekg0zd399.TestBool = valueve7lgvpn

													default:
														if err := dec.SkipValue(); err != nil {
															return err
														}
													}
													if dec.ExpectByte('}') {
														break
													}

													if err := dec.MustByte(','); err != nil {
														return err
													}
												}
											}

											value0e7hf5ny.TestBoolStruct = valuekg0zd399

										default:
											if err := dec.SkipValue(); err != nil {
												return err
											}
										}
										if dec.ExpectByte('}') {
											break
										}

										if err := dec.MustByte(','); err != nil {
											return err
										}
									}
								}

								argvhduyylsu[keycddb9m17] = value0e7hf5ny

								if dec.ExpectByte('}') {
									break
								}

								if err := dec.MustByte(','); err != nil {
									return err
								}
							}
						}

						valuealp9d4xf = AliasMap(argvhduyylsu)
						value3nbjjzoc[key7s07of3m] = valuealp9d4xf

						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				e.TestAliasMap = value3nbjjzoc

			case "testSelector":
				var valuet8052fom *test.Test

				if dec.AssertNull() {
					valuet8052fom = nil
				} else {
					if valuet8052fom == nil {
						valuet8052fom = new(test.Test)
					}

					data, err := dec.ReadValueBytes()
					if err != nil {
						return err
					}

					if decoder, ok := backend.IsDecoder(valuet8052fom); ok {
						if err := decoder.UnmarshalJSON(data); err != nil {
							return err
						}
					} else {
						if err := json.Unmarshal(data, valuet8052fom); err != nil {
							return err
						}
					}
				}

				e.TestSelector = valuet8052fom

			case "testFloat32":
				var valueygjrr0p8 float32

				valueygjrr0p8, err = dec.ReadFloat32()
				if err != nil {
					return err
				}

				e.TestFloat32 = valueygjrr0p8

			case "testMap":
				var valueqc7zmabv map[string]map[StringType]AliasTypeStruct

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if isNil {
					valueqc7zmabv = nil
				} else {
					valueqc7zmabv = make(map[string]map[StringType]AliasTypeStruct)

					for {
						var key1xgmaftd string

						key1xgmaftd, err = dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						var value70dyz4oh map[StringType]AliasTypeStruct

						if isNil, err := dec.AssertObject(); err != nil {
							return err
						} else if isNil {
							value70dyz4oh = nil
						} else {
							value70dyz4oh = make(map[StringType]AliasTypeStruct)

							for {
								var key2krddojz StringType

								var argvgzgsq4fh string

								argvgzgsq4fh, err = dec.ReadString()
								if err != nil {
									return err
								}

								key2krddojz = StringType(argvgzgsq4fh)

								if err := dec.MustByte(':'); err != nil {
									return err
								}

								var valueg37xklvi AliasTypeStruct

								if isNil, err := dec.AssertObject(); err != nil {
									return err
								} else if !isNil {
									for {
										keywyqot14q, err := dec.ReadString()
										if err != nil {
											return err
										}

										if err := dec.MustByte(':'); err != nil {
											return err
										}

										switch keywyqot14q {
										case "testBoolStruct":
											if valueg37xklvi.TestPtrStruct == nil {
												valueg37xklvi.TestPtrStruct = new(TestPtrStruct)
											}

											var value8qu0tigs TestBoolStruct

											if isNil, err := dec.AssertObject(); err != nil {
												return err
											} else if !isNil {
												for {
													keyjiplakp5, err := dec.ReadString()
													if err != nil {
														return err
													}

													if err := dec.MustByte(':'); err != nil {
														return err
													}

													switch keyjiplakp5 {
													case "testBool":
														var valuerlw18hn4 bool

														valuerlw18hn4, err = dec.ReadBool()
														if err != nil {
															return err
														}

														value8qu0tigs.TestBool = valuerlw18hn4

													default:
														if err := dec.SkipValue(); err != nil {
															return err
														}
													}
													if dec.ExpectByte('}') {
														break
													}

													if err := dec.MustByte(','); err != nil {
														return err
													}
												}
											}

											valueg37xklvi.TestBoolStruct = value8qu0tigs

										default:
											if err := dec.SkipValue(); err != nil {
												return err
											}
										}
										if dec.ExpectByte('}') {
											break
										}

										if err := dec.MustByte(','); err != nil {
											return err
										}
									}
								}

								value70dyz4oh[key2krddojz] = valueg37xklvi

								if dec.ExpectByte('}') {
									break
								}

								if err := dec.MustByte(','); err != nil {
									return err
								}
							}
						}

						valueqc7zmabv[key1xgmaftd] = value70dyz4oh

						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				e.TestMap = valueqc7zmabv

			case "testSlice":
				var valueq7oysb3a []StringType

				if isNil, err := dec.AssertArray(); err != nil {
					return err
				} else if isNil {
					valueq7oysb3a = nil
				} else {
					for {
						var valuezqwf4h6y StringType

						var argv0wfc3jz6 string

						argv0wfc3jz6, err = dec.ReadString()
						if err != nil {
							return err
						}

						valuezqwf4h6y = StringType(argv0wfc3jz6)
						valueq7oysb3a = append(valueq7oysb3a, valuezqwf4h6y)

						if dec.ExpectByte(']') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}
				e.TestSlice = valueq7oysb3a

			case "testStruct":
				var valueqad8mwxb TestStruct

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keycibt6i7t, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keycibt6i7t {
						case "testBoolStruct":
							if valueqad8mwxb.TestPtrStruct == nil {
								valueqad8mwxb.TestPtrStruct = new(TestPtrStruct)
							}

							var valuea9cezk73 TestBoolStruct

							if isNil, err := dec.AssertObject(); err != nil {
								return err
							} else if !isNil {
								for {
									keyxff81xxo, err := dec.ReadString()
									if err != nil {
										return err
									}

									if err := dec.MustByte(':'); err != nil {
										return err
									}

									switch keyxff81xxo {
									case "testBool":
										var valuehg6jct3t bool

										valuehg6jct3t, err = dec.ReadBool()
										if err != nil {
											return err
										}

										valuea9cezk73.TestBool = valuehg6jct3t

									default:
										if err := dec.SkipValue(); err != nil {
											return err
										}
									}
									if dec.ExpectByte('}') {
										break
									}

									if err := dec.MustByte(','); err != nil {
										return err
									}
								}
							}

							valueqad8mwxb.TestBoolStruct = valuea9cezk73

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				e.CommonTestStruct = valueqad8mwxb

			case "testBoolStruct":
				if e.AliasTypeStruct == nil {
					e.AliasTypeStruct = new(AliasTypeStruct)
				}

				if e.TestPtrStruct == nil {
					e.TestPtrStruct = new(TestPtrStruct)
				}

				var value4czhd17b TestBoolStruct

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keymphpf1eo, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keymphpf1eo {
						case "testBool":
							var valuedhsjn10o bool

							valuedhsjn10o, err = dec.ReadBool()
							if err != nil {
								return err
							}

							value4czhd17b.TestBool = valuedhsjn10o

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				e.TestBoolStruct = value4czhd17b

			case "testBool":
				var value3r3avi70 bool

				value3r3avi70, err = dec.ReadBool()
				if err != nil {
					return err
				}

				e.TestBool = value3r3avi70

			case "testObject":
				var valuec6dkz8gp map[StringType]interface{}

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if isNil {
					valuec6dkz8gp = nil
				} else {
					valuec6dkz8gp = make(map[StringType]interface{})

					for {
						var key0hsdh6wc StringType

						var argvbufsyrpt string

						argvbufsyrpt, err = dec.ReadString()
						if err != nil {
							return err
						}

						key0hsdh6wc = StringType(argvbufsyrpt)

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						var valuehfk6tk2a interface{}

						valuehfk6tk2a, err = dec.ReadValue()
						if err != nil {
							return err
						}

						valuec6dkz8gp[key0hsdh6wc] = valuehfk6tk2a

						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				e.TestObject = valuec6dkz8gp

			case "testArray":
				var valueec1xj0ux [4]*test.Test

				if isNil, err := dec.AssertArray(); err != nil {
					return err
				} else if !isNil {
					for i := 0; i < 4; i++ {
						var value0r1j0dzc *test.Test

						if dec.AssertNull() {
							value0r1j0dzc = nil
						} else {
							if value0r1j0dzc == nil {
								value0r1j0dzc = new(test.Test)
							}

							data, err := dec.ReadValueBytes()
							if err != nil {
								return err
							}

							if decoder, ok := backend.IsDecoder(value0r1j0dzc); ok {
								if err := decoder.UnmarshalJSON(data); err != nil {
									return err
								}
							} else {
								if err := json.Unmarshal(data, value0r1j0dzc); err != nil {
									return err
								}
							}
						}

						valueec1xj0ux[i] = value0r1j0dzc

						if i < 4-1 {
							if err := dec.MustByte(','); err != nil {
								return err
							}
						}
					}
					if !dec.ExpectByte(']') {
						return fmt.Errorf("index out of range when decode Array [4]*test.Test")
					}
				}
				e.TestArray = valueec1xj0ux

			case "testAliasStruct":
				var valuezvi4jsqk *AliasTypeStruct

				if dec.AssertNull() {
					valuezvi4jsqk = nil
				} else {
					if valuezvi4jsqk == nil {
						valuezvi4jsqk = new(AliasTypeStruct)
					}

					if isNil, err := dec.AssertObject(); err != nil {
						return err
					} else if !isNil {
						for {
							key0moi6gqf, err := dec.ReadString()
							if err != nil {
								return err
							}

							if err := dec.MustByte(':'); err != nil {
								return err
							}

							switch key0moi6gqf {
							case "testBoolStruct":
								if valuezvi4jsqk.TestPtrStruct == nil {
									valuezvi4jsqk.TestPtrStruct = new(TestPtrStruct)
								}

								var valuef993bthi TestBoolStruct

								if isNil, err := dec.AssertObject(); err != nil {
									return err
								} else if !isNil {
									for {
										keyv7ynk5r7, err := dec.ReadString()
										if err != nil {
											return err
										}

										if err := dec.MustByte(':'); err != nil {
											return err
										}

										switch keyv7ynk5r7 {
										case "testBool":
											var valuesxf994c0 bool

											valuesxf994c0, err = dec.ReadBool()
											if err != nil {
												return err
											}

											valuef993bthi.TestBool = valuesxf994c0

										default:
											if err := dec.SkipValue(); err != nil {
												return err
											}
										}
										if dec.ExpectByte('}') {
											break
										}

										if err := dec.MustByte(','); err != nil {
											return err
										}
									}
								}

								valuezvi4jsqk.TestBoolStruct = valuef993bthi

							default:
								if err := dec.SkipValue(); err != nil {
									return err
								}
							}
							if dec.ExpectByte('}') {
								break
							}

							if err := dec.MustByte(','); err != nil {
								return err
							}
						}
					}

				}

				e.CommonAliasTestStruct = valuezvi4jsqk

			case "testString":
				var value7yp3ls8n *string

				if dec.AssertNull() {
					value7yp3ls8n = nil
				} else {
					if value7yp3ls8n == nil {
						value7yp3ls8n = new(string)
					}

					*value7yp3ls8n, err = dec.ReadString()
					if err != nil {
						return err
					}

				}

				e.TestString = value7yp3ls8n

			case "testBytes":
				var valuelxhlnjx7 []byte

				valuelxhlnjx7, err = dec.ReadBytes()
				if err != nil {
					return err
				}

				e.TestBytes = valuelxhlnjx7

			case "testPtr":
				var valuelwrxx2dp *TestPtrStruct

				if dec.AssertNull() {
					valuelwrxx2dp = nil
				} else {
					if valuelwrxx2dp == nil {
						valuelwrxx2dp = new(TestPtrStruct)
					}

					if isNil, err := dec.AssertObject(); err != nil {
						return err
					} else if !isNil {
						for {
							keyhm0o3fq6, err := dec.ReadString()
							if err != nil {
								return err
							}

							if err := dec.MustByte(':'); err != nil {
								return err
							}

							switch keyhm0o3fq6 {
							case "testBoolStruct":
								var valuembzaensr TestBoolStruct

								if isNil, err := dec.AssertObject(); err != nil {
									return err
								} else if !isNil {
									for {
										keyegiigky3, err := dec.ReadString()
										if err != nil {
											return err
										}

										if err := dec.MustByte(':'); err != nil {
											return err
										}

										switch keyegiigky3 {
										case "testBool":
											var value2ito93lo bool

											value2ito93lo, err = dec.ReadBool()
											if err != nil {
												return err
											}

											valuembzaensr.TestBool = value2ito93lo

										default:
											if err := dec.SkipValue(); err != nil {
												return err
											}
										}
										if dec.ExpectByte('}') {
											break
										}

										if err := dec.MustByte(','); err != nil {
											return err
										}
									}
								}

								valuelwrxx2dp.TestBoolStruct = valuembzaensr

							default:
								if err := dec.SkipValue(); err != nil {
									return err
								}
							}
							if dec.ExpectByte('}') {
								break
							}

							if err := dec.MustByte(','); err != nil {
								return err
							}
						}
					}

				}

				e.TestPtr = valuelwrxx2dp

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (e *ExampleStruct) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	if e.TestInt != 0 {
		enc.EncodeKey("testInt")
		enc.EncodeInt16(e.TestInt)
		enc.WriteByte(',')
	}
	if e.TestAlias != nil {
		enc.EncodeKey("testAlias")
		enc.EncodeString(string(*e.TestAlias))
		enc.WriteByte(',')
	}
	if len(e.TestAliasMap) > 0 {
		enc.EncodeKey("testAliasMap")
		enc.WriteByte('{')
		indexosqybvyy := 0
		for key, value := range e.TestAliasMap {
			if indexosqybvyy > 0 {
				enc.WriteByte(',')
			}

			enc.EncodeString(key)
			enc.WriteByte(':')
			enc.WriteByte('{')
			indexco8o7nra := 0
			for key, value := range map[StringType]AliasTypeStruct(value) {
				if indexco8o7nra > 0 {
					enc.WriteByte(',')
				}

				enc.EncodeString(string(key))
				enc.WriteByte(':')
				enc.WriteByte('{')
				if value.TestPtrStruct != nil {
					enc.EncodeKey("testBoolStruct")
					enc.WriteByte('{')
					if value.TestBoolStruct.TestBool {
						enc.EncodeKey("testBool")
						enc.EncodeBool(value.TestBoolStruct.TestBool)
					}
					enc.WriteByte('}')
				}
				enc.WriteByte('}')
				indexco8o7nra++
			}
			enc.WriteByte('}')

			indexosqybvyy++
		}
		enc.WriteByte('}')

		enc.WriteByte(',')
	}
	if e.TestSelector != nil {
		enc.EncodeKey("testSelector")
		value0zwbtk7m := *e.TestSelector
		if encoder, ok := backend.IsEncoder(&value0zwbtk7m); ok {
			data, err := encoder.MarshalJSON()
			if err != nil {
				return nil, err
			}

			enc.Write(data)
		} else {
			data, err := json.Marshal(value0zwbtk7m)
			if err != nil {
				return nil, err
			}

			enc.Write(data)
		}

		enc.WriteByte(',')
	}
	if e.TestFloat32 != 0 {
		enc.EncodeKey("testFloat32")
		enc.EncodeFloat32(e.TestFloat32)
		enc.WriteByte(',')
	}
	if len(e.TestMap) > 0 {
		enc.EncodeKey("testMap")
		enc.WriteByte('{')
		indexv9xbztit := 0
		for key, value := range e.TestMap {
			if indexv9xbztit > 0 {
				enc.WriteByte(',')
			}

			enc.EncodeString(key)
			enc.WriteByte(':')
			enc.WriteByte('{')
			indexjam2mslz := 0
			for key, value := range value {
				if indexjam2mslz > 0 {
					enc.WriteByte(',')
				}

				enc.EncodeString(string(key))
				enc.WriteByte(':')
				enc.WriteByte('{')
				if value.TestPtrStruct != nil {
					enc.EncodeKey("testBoolStruct")
					enc.WriteByte('{')
					if value.TestBoolStruct.TestBool {
						enc.EncodeKey("testBool")
						enc.EncodeBool(value.TestBoolStruct.TestBool)
					}
					enc.WriteByte('}')
				}
				enc.WriteByte('}')
				indexjam2mslz++
			}
			enc.WriteByte('}')

			indexv9xbztit++
		}
		enc.WriteByte('}')

		enc.WriteByte(',')
	}
	if len(e.TestSlice) > 0 {
		enc.EncodeKey("testSlice")
		enc.WriteByte('[')
		for index, value := range e.TestSlice {
			if index > 0 {
				enc.WriteByte(',')
			}

			enc.EncodeString(string(value))
		}
		enc.WriteByte(']')

		enc.WriteByte(',')
	}
	enc.EncodeKey("testStruct")
	enc.WriteByte('{')
	if e.CommonTestStruct.TestPtrStruct != nil {
		enc.EncodeKey("testBoolStruct")
		enc.WriteByte('{')
		if e.CommonTestStruct.TestBoolStruct.TestBool {
			enc.EncodeKey("testBool")
			enc.EncodeBool(e.CommonTestStruct.TestBoolStruct.TestBool)
		}
		enc.WriteByte('}')
	}
	enc.WriteByte('}')
	enc.WriteByte(',')
	if e.AliasTypeStruct != nil {
		if e.TestPtrStruct != nil {
			enc.EncodeKey("testBoolStruct")
			enc.WriteByte('{')
			if e.TestBoolStruct.TestBool {
				enc.EncodeKey("testBool")
				enc.EncodeBool(e.TestBoolStruct.TestBool)
			}
			enc.WriteByte('}')
		}
	}
	enc.WriteByte(',')
	if e.TestBool {
		enc.EncodeKey("testBool")
		enc.EncodeBool(e.TestBool)
		enc.WriteByte(',')
	}
	if len(e.TestObject) > 0 {
		enc.EncodeKey("testObject")
		enc.WriteByte('{')
		indexs3iy6f3c := 0
		for key, value := range e.TestObject {
			if indexs3iy6f3c > 0 {
				enc.WriteByte(',')
			}

			enc.EncodeString(string(key))
			enc.WriteByte(':')
			enc.EncodeInterface(value)
			indexs3iy6f3c++
		}
		enc.WriteByte('}')

		enc.WriteByte(',')
	}
	if len(e.TestArray) > 0 {
		enc.EncodeKey("testArray")
		enc.WriteByte('[')
		for index, value := range e.TestArray {
			if index > 0 {
				enc.WriteByte(',')
			}

			if value != nil {
				valuea47152ai := *value
				if encoder, ok := backend.IsEncoder(&valuea47152ai); ok {
					data, err := encoder.MarshalJSON()
					if err != nil {
						return nil, err
					}

					enc.Write(data)
				} else {
					data, err := json.Marshal(valuea47152ai)
					if err != nil {
						return nil, err
					}

					enc.Write(data)
				}

			} else {
				enc.WriteNull()
			}
		}
		enc.WriteByte(']')

		enc.WriteByte(',')
	}
	if e.CommonAliasTestStruct != nil {
		enc.EncodeKey("testAliasStruct")
		enc.WriteByte('{')
		if e.CommonAliasTestStruct.TestPtrStruct != nil {
			enc.EncodeKey("testBoolStruct")
			enc.WriteByte('{')
			if e.CommonAliasTestStruct.TestBoolStruct.TestBool {
				enc.EncodeKey("testBool")
				enc.EncodeBool(e.CommonAliasTestStruct.TestBoolStruct.TestBool)
			}
			enc.WriteByte('}')
		}
		enc.WriteByte('}')
		enc.WriteByte(',')
	}
	if e.TestString != nil {
		enc.EncodeKey("testString")
		enc.EncodeString(*e.TestString)
		enc.WriteByte(',')
	}
	if len(e.TestBytes) > 0 {
		enc.EncodeKey("testBytes")
		enc.EncodeBytes(e.TestBytes)
		enc.WriteByte(',')
	}
	if e.TestPtr != nil {
		enc.EncodeKey("testPtr")
		enc.WriteByte('{')
		enc.EncodeKey("testBoolStruct")
		enc.WriteByte('{')
		if e.TestPtr.TestBoolStruct.TestBool {
			enc.EncodeKey("testBool")
			enc.EncodeBool(e.TestPtr.TestBoolStruct.TestBool)
		}
		enc.WriteByte('}')
		enc.WriteByte('}')
	}
	enc.WriteByte('}')
	return enc.Bytes(), nil
}
