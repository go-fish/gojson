// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY go-fish/gojson.
// ************************************************************

package benchmark

import (
	json "encoding/json"
	time "time"

	backend "github.com/go-fish/gojson/backend"
)

func (s *SmallPayload) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keye79z58iw, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keye79z58iw {
			case "ip":
				var value8h03yozt string

				value8h03yozt, err = dec.ReadString()
				if err != nil {
					return err
				}

				s.Ip = value8h03yozt

			case "ua":
				var value8jefhkr1 string

				value8jefhkr1, err = dec.ReadString()
				if err != nil {
					return err
				}

				s.Ua = value8jefhkr1

			case "st":
				var valueaxcysncz int

				valueaxcysncz, err = dec.ReadInt()
				if err != nil {
					return err
				}

				s.St = valueaxcysncz

			case "tt":
				var value3nbjjzoc string

				value3nbjjzoc, err = dec.ReadString()
				if err != nil {
					return err
				}

				s.Tt = value3nbjjzoc

			case "gr":
				var value7s07of3m int

				value7s07of3m, err = dec.ReadInt()
				if err != nil {
					return err
				}

				s.Gr = value7s07of3m

			case "uuid":
				var valuealp9d4xf string

				valuealp9d4xf, err = dec.ReadString()
				if err != nil {
					return err
				}

				s.Uuid = valuealp9d4xf

			case "sid":
				var valuehduyylsu int

				valuehduyylsu, err = dec.ReadInt()
				if err != nil {
					return err
				}

				s.Sid = valuehduyylsu

			case "tz":
				var valuecddb9m17 int

				valuecddb9m17, err = dec.ReadInt()
				if err != nil {
					return err
				}

				s.Tz = valuecddb9m17

			case "v":
				var value0e7hf5ny int

				value0e7hf5ny, err = dec.ReadInt()
				if err != nil {
					return err
				}

				s.V = value0e7hf5ny

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (s *SmallPayload) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("ip")
	enc.EncodeString(s.Ip)
	enc.WriteByte(',')
	enc.EncodeKey("ua")
	enc.EncodeString(s.Ua)
	enc.WriteByte(',')
	enc.EncodeKey("st")
	enc.EncodeInt(s.St)
	enc.WriteByte(',')
	enc.EncodeKey("tt")
	enc.EncodeString(s.Tt)
	enc.WriteByte(',')
	enc.EncodeKey("gr")
	enc.EncodeInt(s.Gr)
	enc.WriteByte(',')
	enc.EncodeKey("uuid")
	enc.EncodeString(s.Uuid)
	enc.WriteByte(',')
	enc.EncodeKey("sid")
	enc.EncodeInt(s.Sid)
	enc.WriteByte(',')
	enc.EncodeKey("tz")
	enc.EncodeInt(s.Tz)
	enc.WriteByte(',')
	enc.EncodeKey("v")
	enc.EncodeInt(s.V)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (c *CBAvatar) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keyq5wt3k73, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keyq5wt3k73 {
			case "url":
				var valued9nl3u4m string

				valued9nl3u4m, err = dec.ReadString()
				if err != nil {
					return err
				}

				c.Url = valued9nl3u4m

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (c *CBAvatar) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("url")
	enc.EncodeString(c.Url)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (c *CBGravatar) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keykg0zd399, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keykg0zd399 {
			case "avatars":
				var valueid0vm38d Avatars

				var argvve7lgvpn []*CBAvatar

				if isNil, err := dec.AssertArray(); err != nil {
					return err
				} else if isNil {
					argvve7lgvpn = nil
				} else {
					for {
						var valuet8052fom *CBAvatar

						if dec.AssertNull() {
							valuet8052fom = nil
						} else {
							if valuet8052fom == nil {
								valuet8052fom = new(CBAvatar)
							}

							if isNil, err := dec.AssertObject(); err != nil {
								return err
							} else if !isNil {
								for {
									keyygjrr0p8, err := dec.ReadString()
									if err != nil {
										return err
									}

									if err := dec.MustByte(':'); err != nil {
										return err
									}

									switch keyygjrr0p8 {
									case "url":
										var valueqc7zmabv string

										valueqc7zmabv, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuet8052fom.Url = valueqc7zmabv

									default:
										if err := dec.SkipValue(); err != nil {
											return err
										}
									}
									if dec.ExpectByte('}') {
										break
									}

									if err := dec.MustByte(','); err != nil {
										return err
									}
								}
							}

						}

						argvve7lgvpn = append(argvve7lgvpn, valuet8052fom)

						if dec.ExpectByte(']') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}
				valueid0vm38d = Avatars(argvve7lgvpn)
				c.Avatars = valueid0vm38d

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (c *CBGravatar) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("avatars")
	enc.WriteByte('[')
	for index, value := range []*CBAvatar(c.Avatars) {
		if index > 0 {
			enc.WriteByte(',')
		}

		enc.WriteByte('{')
		enc.EncodeKey("url")
		enc.EncodeString(value.Url)
		enc.WriteByte('}')
	}
	enc.WriteByte(']')

	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (c *CBGithub) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			key1xgmaftd, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch key1xgmaftd {
			case "followers":
				var value70dyz4oh int

				value70dyz4oh, err = dec.ReadInt()
				if err != nil {
					return err
				}

				c.Followers = value70dyz4oh

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (c *CBGithub) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("followers")
	enc.EncodeInt(c.Followers)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (c *CBName) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			key2krddojz, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch key2krddojz {
			case "fullName":
				var valueg37xklvi string

				valueg37xklvi, err = dec.ReadString()
				if err != nil {
					return err
				}

				c.FullName = valueg37xklvi

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (c *CBName) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("fullName")
	enc.EncodeString(c.FullName)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (c *CBPerson) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keygzgsq4fh, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keygzgsq4fh {
			case "name":
				var valuewyqot14q *CBName

				if dec.AssertNull() {
					valuewyqot14q = nil
				} else {
					if valuewyqot14q == nil {
						valuewyqot14q = new(CBName)
					}

					if isNil, err := dec.AssertObject(); err != nil {
						return err
					} else if !isNil {
						for {
							key8qu0tigs, err := dec.ReadString()
							if err != nil {
								return err
							}

							if err := dec.MustByte(':'); err != nil {
								return err
							}

							switch key8qu0tigs {
							case "fullName":
								var valuejiplakp5 string

								valuejiplakp5, err = dec.ReadString()
								if err != nil {
									return err
								}

								valuewyqot14q.FullName = valuejiplakp5

							default:
								if err := dec.SkipValue(); err != nil {
									return err
								}
							}
							if dec.ExpectByte('}') {
								break
							}

							if err := dec.MustByte(','); err != nil {
								return err
							}
						}
					}

				}

				c.Name = valuewyqot14q

			case "github":
				var valuerlw18hn4 *CBGithub

				if dec.AssertNull() {
					valuerlw18hn4 = nil
				} else {
					if valuerlw18hn4 == nil {
						valuerlw18hn4 = new(CBGithub)
					}

					if isNil, err := dec.AssertObject(); err != nil {
						return err
					} else if !isNil {
						for {
							keyq7oysb3a, err := dec.ReadString()
							if err != nil {
								return err
							}

							if err := dec.MustByte(':'); err != nil {
								return err
							}

							switch keyq7oysb3a {
							case "followers":
								var valuezqwf4h6y int

								valuezqwf4h6y, err = dec.ReadInt()
								if err != nil {
									return err
								}

								valuerlw18hn4.Followers = valuezqwf4h6y

							default:
								if err := dec.SkipValue(); err != nil {
									return err
								}
							}
							if dec.ExpectByte('}') {
								break
							}

							if err := dec.MustByte(','); err != nil {
								return err
							}
						}
					}

				}

				c.Github = valuerlw18hn4

			case "gravatar":
				var value0wfc3jz6 *CBGravatar

				if dec.AssertNull() {
					value0wfc3jz6 = nil
				} else {
					if value0wfc3jz6 == nil {
						value0wfc3jz6 = new(CBGravatar)
					}

					if isNil, err := dec.AssertObject(); err != nil {
						return err
					} else if !isNil {
						for {
							keyqad8mwxb, err := dec.ReadString()
							if err != nil {
								return err
							}

							if err := dec.MustByte(':'); err != nil {
								return err
							}

							switch keyqad8mwxb {
							case "avatars":
								var valuecibt6i7t Avatars

								var argva9cezk73 []*CBAvatar

								if isNil, err := dec.AssertArray(); err != nil {
									return err
								} else if isNil {
									argva9cezk73 = nil
								} else {
									for {
										var valuexff81xxo *CBAvatar

										if dec.AssertNull() {
											valuexff81xxo = nil
										} else {
											if valuexff81xxo == nil {
												valuexff81xxo = new(CBAvatar)
											}

											if isNil, err := dec.AssertObject(); err != nil {
												return err
											} else if !isNil {
												for {
													keyhg6jct3t, err := dec.ReadString()
													if err != nil {
														return err
													}

													if err := dec.MustByte(':'); err != nil {
														return err
													}

													switch keyhg6jct3t {
													case "url":
														var value4czhd17b string

														value4czhd17b, err = dec.ReadString()
														if err != nil {
															return err
														}

														valuexff81xxo.Url = value4czhd17b

													default:
														if err := dec.SkipValue(); err != nil {
															return err
														}
													}
													if dec.ExpectByte('}') {
														break
													}

													if err := dec.MustByte(','); err != nil {
														return err
													}
												}
											}

										}

										argva9cezk73 = append(argva9cezk73, valuexff81xxo)

										if dec.ExpectByte(']') {
											break
										}

										if err := dec.MustByte(','); err != nil {
											return err
										}
									}
								}
								valuecibt6i7t = Avatars(argva9cezk73)
								value0wfc3jz6.Avatars = valuecibt6i7t

							default:
								if err := dec.SkipValue(); err != nil {
									return err
								}
							}
							if dec.ExpectByte('}') {
								break
							}

							if err := dec.MustByte(','); err != nil {
								return err
							}
						}
					}

				}

				c.Gravatar = value0wfc3jz6

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (c *CBPerson) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	if c.Name != nil {
		enc.EncodeKey("name")
		enc.WriteByte('{')
		enc.EncodeKey("fullName")
		enc.EncodeString(c.Name.FullName)
		enc.WriteByte('}')
	} else {
		enc.EncodeKey("name")
		enc.WriteByte('{')
		enc.WriteByte('}')
	}
	enc.WriteByte(',')
	if c.Github != nil {
		enc.EncodeKey("github")
		enc.WriteByte('{')
		enc.EncodeKey("followers")
		enc.EncodeInt(c.Github.Followers)
		enc.WriteByte('}')
	} else {
		enc.EncodeKey("github")
		enc.WriteByte('{')
		enc.WriteByte('}')
	}
	enc.WriteByte(',')
	if c.Gravatar != nil {
		enc.EncodeKey("gravatar")
		enc.WriteByte('{')
		enc.EncodeKey("avatars")
		enc.WriteByte('[')
		for index, value := range []*CBAvatar(c.Gravatar.Avatars) {
			if index > 0 {
				enc.WriteByte(',')
			}

			enc.WriteByte('{')
			enc.EncodeKey("url")
			enc.EncodeString(value.Url)
			enc.WriteByte('}')
		}
		enc.WriteByte(']')

		enc.WriteByte('}')
	} else {
		enc.EncodeKey("gravatar")
		enc.WriteByte('{')
		enc.WriteByte('}')
	}
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (m *MediumPayload) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keymphpf1eo, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keymphpf1eo {
			case "person":
				var valuedhsjn10o *CBPerson

				if dec.AssertNull() {
					valuedhsjn10o = nil
				} else {
					if valuedhsjn10o == nil {
						valuedhsjn10o = new(CBPerson)
					}

					if isNil, err := dec.AssertObject(); err != nil {
						return err
					} else if !isNil {
						for {
							key3r3avi70, err := dec.ReadString()
							if err != nil {
								return err
							}

							if err := dec.MustByte(':'); err != nil {
								return err
							}

							switch key3r3avi70 {
							case "name":
								var valuec6dkz8gp *CBName

								if dec.AssertNull() {
									valuec6dkz8gp = nil
								} else {
									if valuec6dkz8gp == nil {
										valuec6dkz8gp = new(CBName)
									}

									if isNil, err := dec.AssertObject(); err != nil {
										return err
									} else if !isNil {
										for {
											key0hsdh6wc, err := dec.ReadString()
											if err != nil {
												return err
											}

											if err := dec.MustByte(':'); err != nil {
												return err
											}

											switch key0hsdh6wc {
											case "fullName":
												var valuehfk6tk2a string

												valuehfk6tk2a, err = dec.ReadString()
												if err != nil {
													return err
												}

												valuec6dkz8gp.FullName = valuehfk6tk2a

											default:
												if err := dec.SkipValue(); err != nil {
													return err
												}
											}
											if dec.ExpectByte('}') {
												break
											}

											if err := dec.MustByte(','); err != nil {
												return err
											}
										}
									}

								}

								valuedhsjn10o.Name = valuec6dkz8gp

							case "github":
								var valuebufsyrpt *CBGithub

								if dec.AssertNull() {
									valuebufsyrpt = nil
								} else {
									if valuebufsyrpt == nil {
										valuebufsyrpt = new(CBGithub)
									}

									if isNil, err := dec.AssertObject(); err != nil {
										return err
									} else if !isNil {
										for {
											keyec1xj0ux, err := dec.ReadString()
											if err != nil {
												return err
											}

											if err := dec.MustByte(':'); err != nil {
												return err
											}

											switch keyec1xj0ux {
											case "followers":
												var value0r1j0dzc int

												value0r1j0dzc, err = dec.ReadInt()
												if err != nil {
													return err
												}

												valuebufsyrpt.Followers = value0r1j0dzc

											default:
												if err := dec.SkipValue(); err != nil {
													return err
												}
											}
											if dec.ExpectByte('}') {
												break
											}

											if err := dec.MustByte(','); err != nil {
												return err
											}
										}
									}

								}

								valuedhsjn10o.Github = valuebufsyrpt

							case "gravatar":
								var valuezvi4jsqk *CBGravatar

								if dec.AssertNull() {
									valuezvi4jsqk = nil
								} else {
									if valuezvi4jsqk == nil {
										valuezvi4jsqk = new(CBGravatar)
									}

									if isNil, err := dec.AssertObject(); err != nil {
										return err
									} else if !isNil {
										for {
											key0moi6gqf, err := dec.ReadString()
											if err != nil {
												return err
											}

											if err := dec.MustByte(':'); err != nil {
												return err
											}

											switch key0moi6gqf {
											case "avatars":
												var valuef993bthi Avatars

												var argvv7ynk5r7 []*CBAvatar

												if isNil, err := dec.AssertArray(); err != nil {
													return err
												} else if isNil {
													argvv7ynk5r7 = nil
												} else {
													for {
														var valuesxf994c0 *CBAvatar

														if dec.AssertNull() {
															valuesxf994c0 = nil
														} else {
															if valuesxf994c0 == nil {
																valuesxf994c0 = new(CBAvatar)
															}

															if isNil, err := dec.AssertObject(); err != nil {
																return err
															} else if !isNil {
																for {
																	key7yp3ls8n, err := dec.ReadString()
																	if err != nil {
																		return err
																	}

																	if err := dec.MustByte(':'); err != nil {
																		return err
																	}

																	switch key7yp3ls8n {
																	case "url":
																		var valuelxhlnjx7 string

																		valuelxhlnjx7, err = dec.ReadString()
																		if err != nil {
																			return err
																		}

																		valuesxf994c0.Url = valuelxhlnjx7

																	default:
																		if err := dec.SkipValue(); err != nil {
																			return err
																		}
																	}
																	if dec.ExpectByte('}') {
																		break
																	}

																	if err := dec.MustByte(','); err != nil {
																		return err
																	}
																}
															}

														}

														argvv7ynk5r7 = append(argvv7ynk5r7, valuesxf994c0)

														if dec.ExpectByte(']') {
															break
														}

														if err := dec.MustByte(','); err != nil {
															return err
														}
													}
												}
												valuef993bthi = Avatars(argvv7ynk5r7)
												valuezvi4jsqk.Avatars = valuef993bthi

											default:
												if err := dec.SkipValue(); err != nil {
													return err
												}
											}
											if dec.ExpectByte('}') {
												break
											}

											if err := dec.MustByte(','); err != nil {
												return err
											}
										}
									}

								}

								valuedhsjn10o.Gravatar = valuezvi4jsqk

							default:
								if err := dec.SkipValue(); err != nil {
									return err
								}
							}
							if dec.ExpectByte('}') {
								break
							}

							if err := dec.MustByte(','); err != nil {
								return err
							}
						}
					}

				}

				m.Person = valuedhsjn10o

			case "company":
				var valuelwrxx2dp string

				valuelwrxx2dp, err = dec.ReadString()
				if err != nil {
					return err
				}

				m.Company = valuelwrxx2dp

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *MediumPayload) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	if m.Person != nil {
		enc.EncodeKey("person")
		enc.WriteByte('{')
		if m.Person.Name != nil {
			enc.EncodeKey("name")
			enc.WriteByte('{')
			enc.EncodeKey("fullName")
			enc.EncodeString(m.Person.Name.FullName)
			enc.WriteByte('}')
		} else {
			enc.EncodeKey("name")
			enc.WriteByte('{')
			enc.WriteByte('}')
		}
		enc.WriteByte(',')
		if m.Person.Github != nil {
			enc.EncodeKey("github")
			enc.WriteByte('{')
			enc.EncodeKey("followers")
			enc.EncodeInt(m.Person.Github.Followers)
			enc.WriteByte('}')
		} else {
			enc.EncodeKey("github")
			enc.WriteByte('{')
			enc.WriteByte('}')
		}
		enc.WriteByte(',')
		if m.Person.Gravatar != nil {
			enc.EncodeKey("gravatar")
			enc.WriteByte('{')
			enc.EncodeKey("avatars")
			enc.WriteByte('[')
			for index, value := range []*CBAvatar(m.Person.Gravatar.Avatars) {
				if index > 0 {
					enc.WriteByte(',')
				}

				enc.WriteByte('{')
				enc.EncodeKey("url")
				enc.EncodeString(value.Url)
				enc.WriteByte('}')
			}
			enc.WriteByte(']')

			enc.WriteByte('}')
		} else {
			enc.EncodeKey("gravatar")
			enc.WriteByte('{')
			enc.WriteByte('}')
		}
		enc.WriteByte('}')
	}
	enc.WriteByte(',')
	if m.Company != "" {
		enc.EncodeKey("company")
		enc.EncodeString(m.Company)
	}
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (d *DSUser) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keyhm0o3fq6, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keyhm0o3fq6 {
			case "username":
				var valuembzaensr string

				valuembzaensr, err = dec.ReadString()
				if err != nil {
					return err
				}

				d.Username = valuembzaensr

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (d *DSUser) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("username")
	enc.EncodeString(d.Username)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (d *DSTopic) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keyegiigky3, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keyegiigky3 {
			case "id":
				var value2ito93lo int

				value2ito93lo, err = dec.ReadInt()
				if err != nil {
					return err
				}

				d.Id = value2ito93lo

			case "slug":
				var valueosqybvyy string

				valueosqybvyy, err = dec.ReadString()
				if err != nil {
					return err
				}

				d.Slug = valueosqybvyy

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (d *DSTopic) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("id")
	enc.EncodeInt(d.Id)
	enc.WriteByte(',')
	enc.EncodeKey("slug")
	enc.EncodeString(d.Slug)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (d *DSTopicsList) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keyco8o7nra, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keyco8o7nra {
			case "topics":
				var value0zwbtk7m DSTopics

				var argvv9xbztit []*DSTopic

				if isNil, err := dec.AssertArray(); err != nil {
					return err
				} else if isNil {
					argvv9xbztit = nil
				} else {
					for {
						var valuejam2mslz *DSTopic

						if dec.AssertNull() {
							valuejam2mslz = nil
						} else {
							if valuejam2mslz == nil {
								valuejam2mslz = new(DSTopic)
							}

							if isNil, err := dec.AssertObject(); err != nil {
								return err
							} else if !isNil {
								for {
									keys3iy6f3c, err := dec.ReadString()
									if err != nil {
										return err
									}

									if err := dec.MustByte(':'); err != nil {
										return err
									}

									switch keys3iy6f3c {
									case "id":
										var valuea47152ai int

										valuea47152ai, err = dec.ReadInt()
										if err != nil {
											return err
										}

										valuejam2mslz.Id = valuea47152ai

									case "slug":
										var value1bjmjtfw string

										value1bjmjtfw, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuejam2mslz.Slug = value1bjmjtfw

									default:
										if err := dec.SkipValue(); err != nil {
											return err
										}
									}
									if dec.ExpectByte('}') {
										break
									}

									if err := dec.MustByte(','); err != nil {
										return err
									}
								}
							}

						}

						argvv9xbztit = append(argvv9xbztit, valuejam2mslz)

						if dec.ExpectByte(']') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}
				value0zwbtk7m = DSTopics(argvv9xbztit)
				d.Topics = value0zwbtk7m

			case "more_topics_url":
				var valuewa3vtjyt string

				valuewa3vtjyt, err = dec.ReadString()
				if err != nil {
					return err
				}

				d.MoreTopicsUrl = valuewa3vtjyt

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (d *DSTopicsList) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("topics")
	enc.WriteByte('[')
	for index, value := range []*DSTopic(d.Topics) {
		if index > 0 {
			enc.WriteByte(',')
		}

		enc.WriteByte('{')
		enc.EncodeKey("id")
		enc.EncodeInt(value.Id)
		enc.WriteByte(',')
		enc.EncodeKey("slug")
		enc.EncodeString(value.Slug)
		enc.WriteByte('}')
	}
	enc.WriteByte(']')

	enc.WriteByte(',')
	enc.EncodeKey("more_topics_url")
	enc.EncodeString(d.MoreTopicsUrl)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (l *LargePayload) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keyem1hv1mo, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keyem1hv1mo {
			case "users":
				var value31xmswml DSUsers

				var argv6g2ast6w []*DSUser

				if isNil, err := dec.AssertArray(); err != nil {
					return err
				} else if isNil {
					argv6g2ast6w = nil
				} else {
					for {
						var valuecjp67hq7 *DSUser

						if dec.AssertNull() {
							valuecjp67hq7 = nil
						} else {
							if valuecjp67hq7 == nil {
								valuecjp67hq7 = new(DSUser)
							}

							if isNil, err := dec.AssertObject(); err != nil {
								return err
							} else if !isNil {
								for {
									keyv3ruhfur, err := dec.ReadString()
									if err != nil {
										return err
									}

									if err := dec.MustByte(':'); err != nil {
										return err
									}

									switch keyv3ruhfur {
									case "username":
										var valuek4r3blhp string

										valuek4r3blhp, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuecjp67hq7.Username = valuek4r3blhp

									default:
										if err := dec.SkipValue(); err != nil {
											return err
										}
									}
									if dec.ExpectByte('}') {
										break
									}

									if err := dec.MustByte(','); err != nil {
										return err
									}
								}
							}

						}

						argv6g2ast6w = append(argv6g2ast6w, valuecjp67hq7)

						if dec.ExpectByte(']') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}
				value31xmswml = DSUsers(argv6g2ast6w)
				l.Users = value31xmswml

			case "topics":
				var valuewb9ix4s1 *DSTopicsList

				if dec.AssertNull() {
					valuewb9ix4s1 = nil
				} else {
					if valuewb9ix4s1 == nil {
						valuewb9ix4s1 = new(DSTopicsList)
					}

					if isNil, err := dec.AssertObject(); err != nil {
						return err
					} else if !isNil {
						for {
							keyqput01ls, err := dec.ReadString()
							if err != nil {
								return err
							}

							if err := dec.MustByte(':'); err != nil {
								return err
							}

							switch keyqput01ls {
							case "topics":
								var valueh5b3q1ul DSTopics

								var argvc2s7yp2g []*DSTopic

								if isNil, err := dec.AssertArray(); err != nil {
									return err
								} else if isNil {
									argvc2s7yp2g = nil
								} else {
									for {
										var value9clksgnx *DSTopic

										if dec.AssertNull() {
											value9clksgnx = nil
										} else {
											if value9clksgnx == nil {
												value9clksgnx = new(DSTopic)
											}

											if isNil, err := dec.AssertObject(); err != nil {
												return err
											} else if !isNil {
												for {
													keya67zdit2, err := dec.ReadString()
													if err != nil {
														return err
													}

													if err := dec.MustByte(':'); err != nil {
														return err
													}

													switch keya67zdit2 {
													case "id":
														var value866i3je9 int

														value866i3je9, err = dec.ReadInt()
														if err != nil {
															return err
														}

														value9clksgnx.Id = value866i3je9

													case "slug":
														var value93t2jvrt string

														value93t2jvrt, err = dec.ReadString()
														if err != nil {
															return err
														}

														value9clksgnx.Slug = value93t2jvrt

													default:
														if err := dec.SkipValue(); err != nil {
															return err
														}
													}
													if dec.ExpectByte('}') {
														break
													}

													if err := dec.MustByte(','); err != nil {
														return err
													}
												}
											}

										}

										argvc2s7yp2g = append(argvc2s7yp2g, value9clksgnx)

										if dec.ExpectByte(']') {
											break
										}

										if err := dec.MustByte(','); err != nil {
											return err
										}
									}
								}
								valueh5b3q1ul = DSTopics(argvc2s7yp2g)
								valuewb9ix4s1.Topics = valueh5b3q1ul

							case "more_topics_url":
								var value7357hmkx string

								value7357hmkx, err = dec.ReadString()
								if err != nil {
									return err
								}

								valuewb9ix4s1.MoreTopicsUrl = value7357hmkx

							default:
								if err := dec.SkipValue(); err != nil {
									return err
								}
							}
							if dec.ExpectByte('}') {
								break
							}

							if err := dec.MustByte(','); err != nil {
								return err
							}
						}
					}

				}

				l.Topics = valuewb9ix4s1

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (l *LargePayload) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("users")
	enc.WriteByte('[')
	for index, value := range []*DSUser(l.Users) {
		if index > 0 {
			enc.WriteByte(',')
		}

		enc.WriteByte('{')
		enc.EncodeKey("username")
		enc.EncodeString(value.Username)
		enc.WriteByte('}')
	}
	enc.WriteByte(']')

	enc.WriteByte(',')
	if l.Topics != nil {
		enc.EncodeKey("topics")
		enc.WriteByte('{')
		enc.EncodeKey("topics")
		enc.WriteByte('[')
		for index, value := range []*DSTopic(l.Topics.Topics) {
			if index > 0 {
				enc.WriteByte(',')
			}

			enc.WriteByte('{')
			enc.EncodeKey("id")
			enc.EncodeInt(value.Id)
			enc.WriteByte(',')
			enc.EncodeKey("slug")
			enc.EncodeString(value.Slug)
			enc.WriteByte('}')
		}
		enc.WriteByte(']')

		enc.WriteByte(',')
		enc.EncodeKey("more_topics_url")
		enc.EncodeString(l.Topics.MoreTopicsUrl)
		enc.WriteByte('}')
	}
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (t *TestStruct) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keyzfgpa6fj, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keyzfgpa6fj {
			case "a":
				var value3cg3r9k0 string

				value3cg3r9k0, err = dec.ReadStringWithEscape()
				if err != nil {
					return err
				}

				t.A = value3cg3r9k0

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (t *TestStruct) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("a")
	enc.EncodeString(t.A)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (t *TestLargeStruct) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keycev5mtqo, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keycev5mtqo {
			case "method":
				var value5c9qhmr0 string

				value5c9qhmr0, err = dec.ReadString()
				if err != nil {
					return err
				}

				t.Method = value5c9qhmr0

			case "url":
				var valuets6wi2hf URL

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						key4hhmh45q, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch key4hhmh45q {
						case "scheme":
							var valueqw7va712 string

							valueqw7va712, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuets6wi2hf.Scheme = valueqw7va712

						case "domain":
							var valuemmac5foa string

							valuemmac5foa, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuets6wi2hf.Domain = valuemmac5foa

						case "path":
							var valuewe3wdgxt string

							valuewe3wdgxt, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuets6wi2hf.Path = valuewe3wdgxt

						case "query":
							var valueh9v1jqi6 string

							valueh9v1jqi6, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuets6wi2hf.Query = valueh9v1jqi6

						case "full":
							var valueooxs5zhw string

							valueooxs5zhw, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuets6wi2hf.Full = valueooxs5zhw

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				t.URL = valuets6wi2hf

			case "event":
				var value6nfzgov9 Event

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keymzqil4f8, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keymzqil4f8 {
						case "end":
							var valuebbn7qk6p time.Time

							data, err := dec.ReadValueBytes()
							if err != nil {
								return err
							}

							if decoder, ok := backend.IsDecoder(&valuebbn7qk6p); ok {
								if err := decoder.UnmarshalJSON(data); err != nil {
									return err
								}
							} else {
								if err := json.Unmarshal(data, &valuebbn7qk6p); err != nil {
									return err
								}
							}
							value6nfzgov9.End = valuebbn7qk6p

						case "kind":
							var valuelw8d6a1f string

							valuelw8d6a1f, err = dec.ReadString()
							if err != nil {
								return err
							}

							value6nfzgov9.Kind = valuelw8d6a1f

						case "category":
							var valuebb8vmp6j string

							valuebb8vmp6j, err = dec.ReadString()
							if err != nil {
								return err
							}

							value6nfzgov9.Category = valuebb8vmp6j

						case "dataset":
							var valuefhtjmskq string

							valuefhtjmskq, err = dec.ReadString()
							if err != nil {
								return err
							}

							value6nfzgov9.Dataset = valuefhtjmskq

						case "duration":
							var valuehhv9qya3 int

							valuehhv9qya3, err = dec.ReadInt()
							if err != nil {
								return err
							}

							value6nfzgov9.Duration = valuehhv9qya3

						case "start":
							var valueueywox16 time.Time

							data, err := dec.ReadValueBytes()
							if err != nil {
								return err
							}

							if decoder, ok := backend.IsDecoder(&valueueywox16); ok {
								if err := decoder.UnmarshalJSON(data); err != nil {
									return err
								}
							} else {
								if err := json.Unmarshal(data, &valueueywox16); err != nil {
									return err
								}
							}
							value6nfzgov9.Start = valueueywox16

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				t.Event = value6nfzgov9

			case "@timestamp":
				var valuej0eurbt5 time.Time

				data, err := dec.ReadValueBytes()
				if err != nil {
					return err
				}

				if decoder, ok := backend.IsDecoder(&valuej0eurbt5); ok {
					if err := decoder.UnmarshalJSON(data); err != nil {
						return err
					}
				} else {
					if err := json.Unmarshal(data, &valuej0eurbt5); err != nil {
						return err
					}
				}
				t.Timestamp = valuej0eurbt5

			case "server":
				var value6se7691d Server

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keyyu9arfxw, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keyyu9arfxw {
						case "port":
							var valuevs9hharh int

							valuevs9hharh, err = dec.ReadInt()
							if err != nil {
								return err
							}

							value6se7691d.Port = valuevs9hharh

						case "domain":
							var valuexran3ndm string

							valuexran3ndm, err = dec.ReadString()
							if err != nil {
								return err
							}

							value6se7691d.Domain = valuexran3ndm

						case "bytes":
							var valuenzgue2jz int

							valuenzgue2jz, err = dec.ReadInt()
							if err != nil {
								return err
							}

							value6se7691d.Bytes = valuenzgue2jz

						case "ip":
							var valuer9bneuf4 string

							valuer9bneuf4, err = dec.ReadString()
							if err != nil {
								return err
							}

							value6se7691d.IP = valuer9bneuf4

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				t.Server = value6se7691d

			case "client":
				var valuej1a03zmv Client

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keyttj2nxwr, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keyttj2nxwr {
						case "ip":
							var valuesr2l4ndj string

							valuesr2l4ndj, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuej1a03zmv.IP = valuesr2l4ndj

						case "port":
							var valueo7nx5v1j int

							valueo7nx5v1j, err = dec.ReadInt()
							if err != nil {
								return err
							}

							valuej1a03zmv.Port = valueo7nx5v1j

						case "bytes":
							var value99ncsklf int

							value99ncsklf, err = dec.ReadInt()
							if err != nil {
								return err
							}

							valuej1a03zmv.Bytes = value99ncsklf

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				t.Client = valuej1a03zmv

			case "agent":
				var valuerpvdjh7j Agent

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keyqteg3bju, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keyqteg3bju {
						case "ephemeral_id":
							var valuec25shomo string

							valuec25shomo, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuerpvdjh7j.EphemeralID = valuec25shomo

						case "hostname":
							var value34z7pinf string

							value34z7pinf, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuerpvdjh7j.Hostname = value34z7pinf

						case "id":
							var valuesnpp9nlt string

							valuesnpp9nlt, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuerpvdjh7j.ID = valuesnpp9nlt

						case "version":
							var valuefokgho3t string

							valuefokgho3t, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuerpvdjh7j.Version = valuefokgho3t

						case "type":
							var valueak4zhy75 string

							valueak4zhy75, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuerpvdjh7j.Type = valueak4zhy75

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				t.Agent = valuerpvdjh7j

			case "host":
				var value4mhhwcr9 Host

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						key6509z8gw, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch key6509z8gw {
						case "name":
							var valuel0sqn0rt string

							valuel0sqn0rt, err = dec.ReadString()
							if err != nil {
								return err
							}

							value4mhhwcr9.Name = valuel0sqn0rt

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				t.Host = value4mhhwcr9

			case "network":
				var valueg2w8kvm3 Network

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keyjx96puyk, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keyjx96puyk {
						case "type":
							var value07wf62p2 string

							value07wf62p2, err = dec.ReadString()
							if err != nil {
								return err
							}

							valueg2w8kvm3.Type = value07wf62p2

						case "transport":
							var value33pyohrg string

							value33pyohrg, err = dec.ReadString()
							if err != nil {
								return err
							}

							valueg2w8kvm3.Transport = value33pyohrg

						case "protocol":
							var valueuvisjo38 string

							valueuvisjo38, err = dec.ReadString()
							if err != nil {
								return err
							}

							valueg2w8kvm3.Protocol = valueuvisjo38

						case "community_id":
							var valuey3k51a30 string

							valuey3k51a30, err = dec.ReadString()
							if err != nil {
								return err
							}

							valueg2w8kvm3.CommunityID = valuey3k51a30

						case "bytes":
							var valuew20k9v1f int

							valuew20k9v1f, err = dec.ReadInt()
							if err != nil {
								return err
							}

							valueg2w8kvm3.Bytes = valuew20k9v1f

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				t.Network = valueg2w8kvm3

			case "@metadata":
				var valuebdc3so8n Metadata

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keyqadmie8k, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keyqadmie8k {
						case "type":
							var valuerpr93cve string

							valuerpr93cve, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuebdc3so8n.Type = valuerpr93cve

						case "version":
							var value825wc3eq string

							value825wc3eq, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuebdc3so8n.Version = value825wc3eq

						case "topic":
							var valuevkc1jmnd string

							valuevkc1jmnd, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuebdc3so8n.Topic = valuevkc1jmnd

						case "beat":
							var valueurgdhidl string

							valueurgdhidl, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuebdc3so8n.Beat = valueurgdhidl

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				t.Metadata = valuebdc3so8n

			case "user_agent":
				var valuew237r5vo UserAgent

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keyev58398g, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keyev58398g {
						case "original":
							var valueyhuv1u1b string

							valueyhuv1u1b, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuew237r5vo.Original = valueyhuv1u1b

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				t.UserAgent = valuew237r5vo

			case "source":
				var valuekfpg2yrf Source

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keyqm0dookk, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keyqm0dookk {
						case "bytes":
							var value2avuglq3 int

							value2avuglq3, err = dec.ReadInt()
							if err != nil {
								return err
							}

							valuekfpg2yrf.Bytes = value2avuglq3

						case "ip":
							var valueemovb1ss string

							valueemovb1ss, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuekfpg2yrf.IP = valueemovb1ss

						case "port":
							var value9uaev1dr int

							value9uaev1dr, err = dec.ReadInt()
							if err != nil {
								return err
							}

							valuekfpg2yrf.Port = value9uaev1dr

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				t.Source = valuekfpg2yrf

			case "http":
				var valuekpdu9i8b HTTP

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keyzqhfqbj5, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keyzqhfqbj5 {
						case "response":
							var value2q7ulir8 Response

							if isNil, err := dec.AssertObject(); err != nil {
								return err
							} else if !isNil {
								for {
									keyaab4s58r, err := dec.ReadString()
									if err != nil {
										return err
									}

									if err := dec.MustByte(':'); err != nil {
										return err
									}

									switch keyaab4s58r {
									case "status_code":
										var valuenhwptcs7 int

										valuenhwptcs7, err = dec.ReadInt()
										if err != nil {
											return err
										}

										value2q7ulir8.StatusCode = valuenhwptcs7

									case "body":
										var value5lk2w1hc Body

										if isNil, err := dec.AssertObject(); err != nil {
											return err
										} else if !isNil {
											for {
												keydxxr0a24, err := dec.ReadString()
												if err != nil {
													return err
												}

												if err := dec.MustByte(':'); err != nil {
													return err
												}

												switch keydxxr0a24 {
												case "content":
													var valuekvq7iv8p string

													valuekvq7iv8p, err = dec.ReadStringWithEscape()
													if err != nil {
														return err
													}

													value5lk2w1hc.Content = valuekvq7iv8p

												case "bytes":
													var valuevzva5jwc int

													valuevzva5jwc, err = dec.ReadInt()
													if err != nil {
														return err
													}

													value5lk2w1hc.Bytes = valuevzva5jwc

												default:
													if err := dec.SkipValue(); err != nil {
														return err
													}
												}
												if dec.ExpectByte('}') {
													break
												}

												if err := dec.MustByte(','); err != nil {
													return err
												}
											}
										}

										value2q7ulir8.Body = value5lk2w1hc

									case "bytes":
										var value5vwo7wv9 int

										value5vwo7wv9, err = dec.ReadInt()
										if err != nil {
											return err
										}

										value2q7ulir8.Bytes = value5vwo7wv9

									case "headers":
										var valuebbluzhez ResponseHeaders

										if isNil, err := dec.AssertObject(); err != nil {
											return err
										} else if !isNil {
											for {
												keyf4f3s5hh, err := dec.ReadString()
												if err != nil {
													return err
												}

												if err := dec.MustByte(':'); err != nil {
													return err
												}

												switch keyf4f3s5hh {
												case "connection":
													var valuereubdelq string

													valuereubdelq, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuebbluzhez.Connection = valuereubdelq

												case "cache-control":
													var valueol9du4sl string

													valueol9du4sl, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuebbluzhez.CacheControl = valueol9du4sl

												case "pragma":
													var valuearmjc451 string

													valuearmjc451, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuebbluzhez.Pragma = valuearmjc451

												case "server":
													var valuew8angq2t string

													valuew8angq2t, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuebbluzhez.Server = valuew8angq2t

												case "date":
													var valuegy0brexw string

													valuegy0brexw, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuebbluzhez.Date = valuegy0brexw

												case "content-length":
													var valuesvlz6aow int

													valuesvlz6aow, err = dec.ReadInt()
													if err != nil {
														return err
													}

													valuebbluzhez.ContentLength = valuesvlz6aow

												case "transfer-encoding":
													var value04r27ap7 string

													value04r27ap7, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuebbluzhez.TransferEncoding = value04r27ap7

												default:
													if err := dec.SkipValue(); err != nil {
														return err
													}
												}
												if dec.ExpectByte('}') {
													break
												}

												if err := dec.MustByte(','); err != nil {
													return err
												}
											}
										}

										value2q7ulir8.Headers = valuebbluzhez

									case "status_phrase":
										var valuehdo9g6lr string

										valuehdo9g6lr, err = dec.ReadString()
										if err != nil {
											return err
										}

										value2q7ulir8.StatusPhrase = valuehdo9g6lr

									default:
										if err := dec.SkipValue(); err != nil {
											return err
										}
									}
									if dec.ExpectByte('}') {
										break
									}

									if err := dec.MustByte(','); err != nil {
										return err
									}
								}
							}

							valuekpdu9i8b.Response = value2q7ulir8

						case "version":
							var valueba8maliu string

							valueba8maliu, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuekpdu9i8b.Version = valueba8maliu

						case "request":
							var value1seit6g4 Request

							if isNil, err := dec.AssertObject(); err != nil {
								return err
							} else if !isNil {
								for {
									keyyml4h054, err := dec.ReadString()
									if err != nil {
										return err
									}

									if err := dec.MustByte(':'); err != nil {
										return err
									}

									switch keyyml4h054 {
									case "headers":
										var valuenv3gem92 RequestHeaders

										if isNil, err := dec.AssertObject(); err != nil {
											return err
										} else if !isNil {
											for {
												keyek490sat, err := dec.ReadString()
												if err != nil {
													return err
												}

												if err := dec.MustByte(':'); err != nil {
													return err
												}

												switch keyek490sat {
												case "user-agent":
													var values1iwt4jr string

													values1iwt4jr, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuenv3gem92.UserAgent = values1iwt4jr

												case "accept-language":
													var valuekekg3y56 string

													valuekekg3y56, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuenv3gem92.AcceptLanguage = valuekekg3y56

												case "content-length":
													var valuez12ns1ql int

													valuez12ns1ql, err = dec.ReadInt()
													if err != nil {
														return err
													}

													valuenv3gem92.ContentLength = valuez12ns1ql

												case "x-real-ip":
													var value4yus529c string

													value4yus529c, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuenv3gem92.XRealIP = value4yus529c

												case "pragma":
													var valuems2b589y string

													valuems2b589y, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuenv3gem92.Pragma = valuems2b589y

												case "accept":
													var valuewj5e506t string

													valuewj5e506t, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuenv3gem92.Accept = valuewj5e506t

												case "referer":
													var value1xbdkioc string

													value1xbdkioc, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuenv3gem92.Referer = value1xbdkioc

												case "x-requested-with":
													var valueh4acscz3 string

													valueh4acscz3, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuenv3gem92.XRequestedWith = valueh4acscz3

												case "content-type":
													var valuekfo1ho6j string

													valuekfo1ho6j, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuenv3gem92.ContentType = valuekfo1ho6j

												case "host":
													var valuebqwb32vy string

													valuebqwb32vy, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuenv3gem92.Host = valuebqwb32vy

												case "x-forwarded-for":
													var value5808mfze string

													value5808mfze, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuenv3gem92.XForwardedFor = value5808mfze

												case "yz_client_ip":
													var valuex3zowczo string

													valuex3zowczo, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuenv3gem92.YzClientIP = valuex3zowczo

												case "connection":
													var valuezkx6rxrn string

													valuezkx6rxrn, err = dec.ReadString()
													if err != nil {
														return err
													}

													valuenv3gem92.Connection = valuezkx6rxrn

												default:
													if err := dec.SkipValue(); err != nil {
														return err
													}
												}
												if dec.ExpectByte('}') {
													break
												}

												if err := dec.MustByte(','); err != nil {
													return err
												}
											}
										}

										value1seit6g4.Headers = valuenv3gem92

									case "method":
										var valueqv32jc3j string

										valueqv32jc3j, err = dec.ReadString()
										if err != nil {
											return err
										}

										value1seit6g4.Method = valueqv32jc3j

									case "body":
										var valuegg8yw35s Body

										if isNil, err := dec.AssertObject(); err != nil {
											return err
										} else if !isNil {
											for {
												key5fpsqm5v, err := dec.ReadString()
												if err != nil {
													return err
												}

												if err := dec.MustByte(':'); err != nil {
													return err
												}

												switch key5fpsqm5v {
												case "content":
													var valuex3p5w6e0 string

													valuex3p5w6e0, err = dec.ReadStringWithEscape()
													if err != nil {
														return err
													}

													valuegg8yw35s.Content = valuex3p5w6e0

												case "bytes":
													var valuegxcrpa2k int

													valuegxcrpa2k, err = dec.ReadInt()
													if err != nil {
														return err
													}

													valuegg8yw35s.Bytes = valuegxcrpa2k

												default:
													if err := dec.SkipValue(); err != nil {
														return err
													}
												}
												if dec.ExpectByte('}') {
													break
												}

												if err := dec.MustByte(','); err != nil {
													return err
												}
											}
										}

										value1seit6g4.Body = valuegg8yw35s

									case "referrer":
										var valuejkstj0fw string

										valuejkstj0fw, err = dec.ReadString()
										if err != nil {
											return err
										}

										value1seit6g4.Referrer = valuejkstj0fw

									case "bytes":
										var valueaqfdecox int

										valueaqfdecox, err = dec.ReadInt()
										if err != nil {
											return err
										}

										value1seit6g4.Bytes = valueaqfdecox

									default:
										if err := dec.SkipValue(); err != nil {
											return err
										}
									}
									if dec.ExpectByte('}') {
										break
									}

									if err := dec.MustByte(','); err != nil {
										return err
									}
								}
							}

							valuekpdu9i8b.Request = value1seit6g4

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				t.HTTP = valuekpdu9i8b

			case "query":
				var valueg2hqcroz string

				valueg2hqcroz, err = dec.ReadString()
				if err != nil {
					return err
				}

				t.Query = valueg2hqcroz

			case "destination":
				var valuea5mpeo0x Destination

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keyst5itgsn, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keyst5itgsn {
						case "ip":
							var valuep9ybtzjx string

							valuep9ybtzjx, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuea5mpeo0x.IP = valuep9ybtzjx

						case "port":
							var valueodpbatj9 int

							valueodpbatj9, err = dec.ReadInt()
							if err != nil {
								return err
							}

							valuea5mpeo0x.Port = valueodpbatj9

						case "domain":
							var valuehs6hrm7z string

							valuehs6hrm7z, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuea5mpeo0x.Domain = valuehs6hrm7z

						case "bytes":
							var value8omupd7k int

							value8omupd7k, err = dec.ReadInt()
							if err != nil {
								return err
							}

							valuea5mpeo0x.Bytes = value8omupd7k

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				t.Destination = valuea5mpeo0x

			case "type":
				var valuea9lf6qjv string

				valuea9lf6qjv, err = dec.ReadString()
				if err != nil {
					return err
				}

				t.Type = valuea9lf6qjv

			case "ecs":
				var value49enhou6 Ecs

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keyjvsvet6y, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keyjvsvet6y {
						case "version":
							var valueox0q5f1r string

							valueox0q5f1r, err = dec.ReadString()
							if err != nil {
								return err
							}

							value49enhou6.Version = valueox0q5f1r

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				t.Ecs = value49enhou6

			case "status":
				var valuetzsaqfkx string

				valuetzsaqfkx, err = dec.ReadString()
				if err != nil {
					return err
				}

				t.Status = valuetzsaqfkx

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (t *TestLargeStruct) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("method")
	enc.EncodeString(t.Method)
	enc.WriteByte(',')
	enc.EncodeKey("url")
	enc.WriteByte('{')
	enc.EncodeKey("scheme")
	enc.EncodeString(t.URL.Scheme)
	enc.WriteByte(',')
	enc.EncodeKey("domain")
	enc.EncodeString(t.URL.Domain)
	enc.WriteByte(',')
	enc.EncodeKey("path")
	enc.EncodeString(t.URL.Path)
	enc.WriteByte(',')
	enc.EncodeKey("query")
	enc.EncodeString(t.URL.Query)
	enc.WriteByte(',')
	enc.EncodeKey("full")
	enc.EncodeString(t.URL.Full)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("event")
	enc.WriteByte('{')
	enc.EncodeKey("end")
	valuebja9avoc := t.Event.End
	if encoder, ok := backend.IsEncoder(&valuebja9avoc); ok {
		data, err := encoder.MarshalJSON()
		if err != nil {
			return nil, err
		}

		enc.Write(data)
	} else {
		data, err := json.Marshal(valuebja9avoc)
		if err != nil {
			return nil, err
		}

		enc.Write(data)
	}

	enc.WriteByte(',')
	enc.EncodeKey("kind")
	enc.EncodeString(t.Event.Kind)
	enc.WriteByte(',')
	enc.EncodeKey("category")
	enc.EncodeString(t.Event.Category)
	enc.WriteByte(',')
	enc.EncodeKey("dataset")
	enc.EncodeString(t.Event.Dataset)
	enc.WriteByte(',')
	enc.EncodeKey("duration")
	enc.EncodeInt(t.Event.Duration)
	enc.WriteByte(',')
	enc.EncodeKey("start")
	valuexvisij8w := t.Event.Start
	if encoder, ok := backend.IsEncoder(&valuexvisij8w); ok {
		data, err := encoder.MarshalJSON()
		if err != nil {
			return nil, err
		}

		enc.Write(data)
	} else {
		data, err := json.Marshal(valuexvisij8w)
		if err != nil {
			return nil, err
		}

		enc.Write(data)
	}

	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("@timestamp")
	valuegat1cwch := t.Timestamp
	if encoder, ok := backend.IsEncoder(&valuegat1cwch); ok {
		data, err := encoder.MarshalJSON()
		if err != nil {
			return nil, err
		}

		enc.Write(data)
	} else {
		data, err := json.Marshal(valuegat1cwch)
		if err != nil {
			return nil, err
		}

		enc.Write(data)
	}

	enc.WriteByte(',')
	enc.EncodeKey("server")
	enc.WriteByte('{')
	enc.EncodeKey("port")
	enc.EncodeInt(t.Server.Port)
	enc.WriteByte(',')
	enc.EncodeKey("domain")
	enc.EncodeString(t.Server.Domain)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(t.Server.Bytes)
	enc.WriteByte(',')
	enc.EncodeKey("ip")
	enc.EncodeString(t.Server.IP)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("client")
	enc.WriteByte('{')
	enc.EncodeKey("ip")
	enc.EncodeString(t.Client.IP)
	enc.WriteByte(',')
	enc.EncodeKey("port")
	enc.EncodeInt(t.Client.Port)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(t.Client.Bytes)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("agent")
	enc.WriteByte('{')
	enc.EncodeKey("ephemeral_id")
	enc.EncodeString(t.Agent.EphemeralID)
	enc.WriteByte(',')
	enc.EncodeKey("hostname")
	enc.EncodeString(t.Agent.Hostname)
	enc.WriteByte(',')
	enc.EncodeKey("id")
	enc.EncodeString(t.Agent.ID)
	enc.WriteByte(',')
	enc.EncodeKey("version")
	enc.EncodeString(t.Agent.Version)
	enc.WriteByte(',')
	enc.EncodeKey("type")
	enc.EncodeString(t.Agent.Type)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("host")
	enc.WriteByte('{')
	enc.EncodeKey("name")
	enc.EncodeString(t.Host.Name)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("network")
	enc.WriteByte('{')
	enc.EncodeKey("type")
	enc.EncodeString(t.Network.Type)
	enc.WriteByte(',')
	enc.EncodeKey("transport")
	enc.EncodeString(t.Network.Transport)
	enc.WriteByte(',')
	enc.EncodeKey("protocol")
	enc.EncodeString(t.Network.Protocol)
	enc.WriteByte(',')
	enc.EncodeKey("community_id")
	enc.EncodeString(t.Network.CommunityID)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(t.Network.Bytes)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("@metadata")
	enc.WriteByte('{')
	enc.EncodeKey("type")
	enc.EncodeString(t.Metadata.Type)
	enc.WriteByte(',')
	enc.EncodeKey("version")
	enc.EncodeString(t.Metadata.Version)
	enc.WriteByte(',')
	enc.EncodeKey("topic")
	enc.EncodeString(t.Metadata.Topic)
	enc.WriteByte(',')
	enc.EncodeKey("beat")
	enc.EncodeString(t.Metadata.Beat)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("user_agent")
	enc.WriteByte('{')
	enc.EncodeKey("original")
	enc.EncodeString(t.UserAgent.Original)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("source")
	enc.WriteByte('{')
	enc.EncodeKey("bytes")
	enc.EncodeInt(t.Source.Bytes)
	enc.WriteByte(',')
	enc.EncodeKey("ip")
	enc.EncodeString(t.Source.IP)
	enc.WriteByte(',')
	enc.EncodeKey("port")
	enc.EncodeInt(t.Source.Port)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("http")
	enc.WriteByte('{')
	enc.EncodeKey("response")
	enc.WriteByte('{')
	enc.EncodeKey("status_code")
	enc.EncodeInt(t.HTTP.Response.StatusCode)
	enc.WriteByte(',')
	enc.EncodeKey("body")
	enc.WriteByte('{')
	enc.EncodeKey("content")
	enc.EncodeString(t.HTTP.Response.Body.Content)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(t.HTTP.Response.Body.Bytes)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(t.HTTP.Response.Bytes)
	enc.WriteByte(',')
	enc.EncodeKey("headers")
	enc.WriteByte('{')
	enc.EncodeKey("connection")
	enc.EncodeString(t.HTTP.Response.Headers.Connection)
	enc.WriteByte(',')
	enc.EncodeKey("cache-control")
	enc.EncodeString(t.HTTP.Response.Headers.CacheControl)
	enc.WriteByte(',')
	enc.EncodeKey("pragma")
	enc.EncodeString(t.HTTP.Response.Headers.Pragma)
	enc.WriteByte(',')
	enc.EncodeKey("server")
	enc.EncodeString(t.HTTP.Response.Headers.Server)
	enc.WriteByte(',')
	enc.EncodeKey("date")
	enc.EncodeString(t.HTTP.Response.Headers.Date)
	enc.WriteByte(',')
	enc.EncodeKey("content-length")
	enc.EncodeInt(t.HTTP.Response.Headers.ContentLength)
	enc.WriteByte(',')
	enc.EncodeKey("transfer-encoding")
	enc.EncodeString(t.HTTP.Response.Headers.TransferEncoding)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("status_phrase")
	enc.EncodeString(t.HTTP.Response.StatusPhrase)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("version")
	enc.EncodeString(t.HTTP.Version)
	enc.WriteByte(',')
	enc.EncodeKey("request")
	enc.WriteByte('{')
	enc.EncodeKey("headers")
	enc.WriteByte('{')
	enc.EncodeKey("user-agent")
	enc.EncodeString(t.HTTP.Request.Headers.UserAgent)
	enc.WriteByte(',')
	enc.EncodeKey("accept-language")
	enc.EncodeString(t.HTTP.Request.Headers.AcceptLanguage)
	enc.WriteByte(',')
	enc.EncodeKey("content-length")
	enc.EncodeInt(t.HTTP.Request.Headers.ContentLength)
	enc.WriteByte(',')
	enc.EncodeKey("x-real-ip")
	enc.EncodeString(t.HTTP.Request.Headers.XRealIP)
	enc.WriteByte(',')
	enc.EncodeKey("pragma")
	enc.EncodeString(t.HTTP.Request.Headers.Pragma)
	enc.WriteByte(',')
	enc.EncodeKey("accept")
	enc.EncodeString(t.HTTP.Request.Headers.Accept)
	enc.WriteByte(',')
	enc.EncodeKey("referer")
	enc.EncodeString(t.HTTP.Request.Headers.Referer)
	enc.WriteByte(',')
	enc.EncodeKey("x-requested-with")
	enc.EncodeString(t.HTTP.Request.Headers.XRequestedWith)
	enc.WriteByte(',')
	enc.EncodeKey("content-type")
	enc.EncodeString(t.HTTP.Request.Headers.ContentType)
	enc.WriteByte(',')
	enc.EncodeKey("host")
	enc.EncodeString(t.HTTP.Request.Headers.Host)
	enc.WriteByte(',')
	enc.EncodeKey("x-forwarded-for")
	enc.EncodeString(t.HTTP.Request.Headers.XForwardedFor)
	enc.WriteByte(',')
	enc.EncodeKey("yz_client_ip")
	enc.EncodeString(t.HTTP.Request.Headers.YzClientIP)
	enc.WriteByte(',')
	enc.EncodeKey("connection")
	enc.EncodeString(t.HTTP.Request.Headers.Connection)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("method")
	enc.EncodeString(t.HTTP.Request.Method)
	enc.WriteByte(',')
	enc.EncodeKey("body")
	enc.WriteByte('{')
	enc.EncodeKey("content")
	enc.EncodeString(t.HTTP.Request.Body.Content)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(t.HTTP.Request.Body.Bytes)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("referrer")
	enc.EncodeString(t.HTTP.Request.Referrer)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(t.HTTP.Request.Bytes)
	enc.WriteByte('}')
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("query")
	enc.EncodeString(t.Query)
	enc.WriteByte(',')
	enc.EncodeKey("destination")
	enc.WriteByte('{')
	enc.EncodeKey("ip")
	enc.EncodeString(t.Destination.IP)
	enc.WriteByte(',')
	enc.EncodeKey("port")
	enc.EncodeInt(t.Destination.Port)
	enc.WriteByte(',')
	enc.EncodeKey("domain")
	enc.EncodeString(t.Destination.Domain)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(t.Destination.Bytes)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("type")
	enc.EncodeString(t.Type)
	enc.WriteByte(',')
	enc.EncodeKey("ecs")
	enc.WriteByte('{')
	enc.EncodeKey("version")
	enc.EncodeString(t.Ecs.Version)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("status")
	enc.EncodeString(t.Status)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (m *Metadata) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keymwjdqyq1, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keymwjdqyq1 {
			case "type":
				var value0rd3it81 string

				value0rd3it81, err = dec.ReadString()
				if err != nil {
					return err
				}

				m.Type = value0rd3it81

			case "version":
				var valueyg1e85hr string

				valueyg1e85hr, err = dec.ReadString()
				if err != nil {
					return err
				}

				m.Version = valueyg1e85hr

			case "topic":
				var valuemz6chdks string

				valuemz6chdks, err = dec.ReadString()
				if err != nil {
					return err
				}

				m.Topic = valuemz6chdks

			case "beat":
				var valuenfk8qsee string

				valuenfk8qsee, err = dec.ReadString()
				if err != nil {
					return err
				}

				m.Beat = valuenfk8qsee

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *Metadata) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("type")
	enc.EncodeString(m.Type)
	enc.WriteByte(',')
	enc.EncodeKey("version")
	enc.EncodeString(m.Version)
	enc.WriteByte(',')
	enc.EncodeKey("topic")
	enc.EncodeString(m.Topic)
	enc.WriteByte(',')
	enc.EncodeKey("beat")
	enc.EncodeString(m.Beat)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (e *Ecs) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keyvylfgq8j, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keyvylfgq8j {
			case "version":
				var valueol5tqfht string

				valueol5tqfht, err = dec.ReadString()
				if err != nil {
					return err
				}

				e.Version = valueol5tqfht

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (e *Ecs) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("version")
	enc.EncodeString(e.Version)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (h *Host) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keyu0sxbu1u, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keyu0sxbu1u {
			case "name":
				var valuedepf8qq9 string

				valuedepf8qq9, err = dec.ReadString()
				if err != nil {
					return err
				}

				h.Name = valuedepf8qq9

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (h *Host) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("name")
	enc.EncodeString(h.Name)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (s *Server) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keyta8v9mvp, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keyta8v9mvp {
			case "port":
				var valuenjysaxfb int

				valuenjysaxfb, err = dec.ReadInt()
				if err != nil {
					return err
				}

				s.Port = valuenjysaxfb

			case "domain":
				var valuevgsr4ic9 string

				valuevgsr4ic9, err = dec.ReadString()
				if err != nil {
					return err
				}

				s.Domain = valuevgsr4ic9

			case "bytes":
				var value9i0jqvw5 int

				value9i0jqvw5, err = dec.ReadInt()
				if err != nil {
					return err
				}

				s.Bytes = value9i0jqvw5

			case "ip":
				var valuel32gbe6b string

				valuel32gbe6b, err = dec.ReadString()
				if err != nil {
					return err
				}

				s.IP = valuel32gbe6b

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (s *Server) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("port")
	enc.EncodeInt(s.Port)
	enc.WriteByte(',')
	enc.EncodeKey("domain")
	enc.EncodeString(s.Domain)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(s.Bytes)
	enc.WriteByte(',')
	enc.EncodeKey("ip")
	enc.EncodeString(s.IP)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (s *Source) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			key6ta0lae6, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch key6ta0lae6 {
			case "bytes":
				var valueh79k69xq int

				valueh79k69xq, err = dec.ReadInt()
				if err != nil {
					return err
				}

				s.Bytes = valueh79k69xq

			case "ip":
				var valuehljd9plt string

				valuehljd9plt, err = dec.ReadString()
				if err != nil {
					return err
				}

				s.IP = valuehljd9plt

			case "port":
				var valueaszawu59 int

				valueaszawu59, err = dec.ReadInt()
				if err != nil {
					return err
				}

				s.Port = valueaszawu59

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (s *Source) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("bytes")
	enc.EncodeInt(s.Bytes)
	enc.WriteByte(',')
	enc.EncodeKey("ip")
	enc.EncodeString(s.IP)
	enc.WriteByte(',')
	enc.EncodeKey("port")
	enc.EncodeInt(s.Port)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (b *Body) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keymhk0n5ky, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keymhk0n5ky {
			case "content":
				var value7j61vca3 string

				value7j61vca3, err = dec.ReadStringWithEscape()
				if err != nil {
					return err
				}

				b.Content = value7j61vca3

			case "bytes":
				var value86mft6vx int

				value86mft6vx, err = dec.ReadInt()
				if err != nil {
					return err
				}

				b.Bytes = value86mft6vx

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (b *Body) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("content")
	enc.EncodeString(b.Content)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(b.Bytes)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (r *ResponseHeaders) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keyicv1jakx, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keyicv1jakx {
			case "connection":
				var valuekesylv3v string

				valuekesylv3v, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.Connection = valuekesylv3v

			case "cache-control":
				var valuek6k76ai6 string

				valuek6k76ai6, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.CacheControl = valuek6k76ai6

			case "pragma":
				var value04230nqc string

				value04230nqc, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.Pragma = value04230nqc

			case "server":
				var valueuwclqcmi string

				valueuwclqcmi, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.Server = valueuwclqcmi

			case "date":
				var valuevv3cocpy string

				valuevv3cocpy, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.Date = valuevv3cocpy

			case "content-length":
				var valuerjc6sq5l int

				valuerjc6sq5l, err = dec.ReadInt()
				if err != nil {
					return err
				}

				r.ContentLength = valuerjc6sq5l

			case "transfer-encoding":
				var valuecd651zju string

				valuecd651zju, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.TransferEncoding = valuecd651zju

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (r *ResponseHeaders) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("connection")
	enc.EncodeString(r.Connection)
	enc.WriteByte(',')
	enc.EncodeKey("cache-control")
	enc.EncodeString(r.CacheControl)
	enc.WriteByte(',')
	enc.EncodeKey("pragma")
	enc.EncodeString(r.Pragma)
	enc.WriteByte(',')
	enc.EncodeKey("server")
	enc.EncodeString(r.Server)
	enc.WriteByte(',')
	enc.EncodeKey("date")
	enc.EncodeString(r.Date)
	enc.WriteByte(',')
	enc.EncodeKey("content-length")
	enc.EncodeInt(r.ContentLength)
	enc.WriteByte(',')
	enc.EncodeKey("transfer-encoding")
	enc.EncodeString(r.TransferEncoding)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (r *Response) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keybpamux0b, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keybpamux0b {
			case "status_code":
				var valueifaw6v88 int

				valueifaw6v88, err = dec.ReadInt()
				if err != nil {
					return err
				}

				r.StatusCode = valueifaw6v88

			case "body":
				var valuexd6ircow Body

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						key2x61y770, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch key2x61y770 {
						case "content":
							var valuej19zbsk4 string

							valuej19zbsk4, err = dec.ReadStringWithEscape()
							if err != nil {
								return err
							}

							valuexd6ircow.Content = valuej19zbsk4

						case "bytes":
							var valueddqin757 int

							valueddqin757, err = dec.ReadInt()
							if err != nil {
								return err
							}

							valuexd6ircow.Bytes = valueddqin757

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				r.Body = valuexd6ircow

			case "bytes":
				var value6o0l13cb int

				value6o0l13cb, err = dec.ReadInt()
				if err != nil {
					return err
				}

				r.Bytes = value6o0l13cb

			case "headers":
				var value36ubzqri ResponseHeaders

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keybs9rax9a, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keybs9rax9a {
						case "content-length":
							var valuee0j10vw1 int

							valuee0j10vw1, err = dec.ReadInt()
							if err != nil {
								return err
							}

							value36ubzqri.ContentLength = valuee0j10vw1

						case "transfer-encoding":
							var value1q6z1pse string

							value1q6z1pse, err = dec.ReadString()
							if err != nil {
								return err
							}

							value36ubzqri.TransferEncoding = value1q6z1pse

						case "connection":
							var valuevkuxl009 string

							valuevkuxl009, err = dec.ReadString()
							if err != nil {
								return err
							}

							value36ubzqri.Connection = valuevkuxl009

						case "cache-control":
							var valueucol1ull string

							valueucol1ull, err = dec.ReadString()
							if err != nil {
								return err
							}

							value36ubzqri.CacheControl = valueucol1ull

						case "pragma":
							var value0pmsddoh string

							value0pmsddoh, err = dec.ReadString()
							if err != nil {
								return err
							}

							value36ubzqri.Pragma = value0pmsddoh

						case "server":
							var value2nxsoz7r string

							value2nxsoz7r, err = dec.ReadString()
							if err != nil {
								return err
							}

							value36ubzqri.Server = value2nxsoz7r

						case "date":
							var valuenh3vmb91 string

							valuenh3vmb91, err = dec.ReadString()
							if err != nil {
								return err
							}

							value36ubzqri.Date = valuenh3vmb91

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				r.Headers = value36ubzqri

			case "status_phrase":
				var valuevpjxr5g0 string

				valuevpjxr5g0, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.StatusPhrase = valuevpjxr5g0

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (r *Response) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("status_code")
	enc.EncodeInt(r.StatusCode)
	enc.WriteByte(',')
	enc.EncodeKey("body")
	enc.WriteByte('{')
	enc.EncodeKey("content")
	enc.EncodeString(r.Body.Content)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(r.Body.Bytes)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(r.Bytes)
	enc.WriteByte(',')
	enc.EncodeKey("headers")
	enc.WriteByte('{')
	enc.EncodeKey("content-length")
	enc.EncodeInt(r.Headers.ContentLength)
	enc.WriteByte(',')
	enc.EncodeKey("transfer-encoding")
	enc.EncodeString(r.Headers.TransferEncoding)
	enc.WriteByte(',')
	enc.EncodeKey("connection")
	enc.EncodeString(r.Headers.Connection)
	enc.WriteByte(',')
	enc.EncodeKey("cache-control")
	enc.EncodeString(r.Headers.CacheControl)
	enc.WriteByte(',')
	enc.EncodeKey("pragma")
	enc.EncodeString(r.Headers.Pragma)
	enc.WriteByte(',')
	enc.EncodeKey("server")
	enc.EncodeString(r.Headers.Server)
	enc.WriteByte(',')
	enc.EncodeKey("date")
	enc.EncodeString(r.Headers.Date)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("status_phrase")
	enc.EncodeString(r.StatusPhrase)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (r *RequestHeaders) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keys6w5joox, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keys6w5joox {
			case "x-requested-with":
				var value2wgeqzif string

				value2wgeqzif, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.XRequestedWith = value2wgeqzif

			case "user-agent":
				var valuefgxu4kdy string

				valuefgxu4kdy, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.UserAgent = valuefgxu4kdy

			case "content-length":
				var valuelx0q04s8 int

				valuelx0q04s8, err = dec.ReadInt()
				if err != nil {
					return err
				}

				r.ContentLength = valuelx0q04s8

			case "x-real-ip":
				var valuegdoefwni string

				valuegdoefwni, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.XRealIP = valuegdoefwni

			case "connection":
				var value12sdpn02 string

				value12sdpn02, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.Connection = value12sdpn02

			case "accept":
				var valuecdx84mlb string

				valuecdx84mlb, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.Accept = valuecdx84mlb

			case "host":
				var valueawpxymrs string

				valueawpxymrs, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.Host = valueawpxymrs

			case "referer":
				var valueq30xrwh3 string

				valueq30xrwh3, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.Referer = valueq30xrwh3

			case "yz_client_ip":
				var value5i2j4g2p string

				value5i2j4g2p, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.YzClientIP = value5i2j4g2p

			case "accept-language":
				var value41yaciis string

				value41yaciis, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.AcceptLanguage = value41yaciis

			case "pragma":
				var valueq9bgdc2q string

				valueq9bgdc2q, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.Pragma = valueq9bgdc2q

			case "x-forwarded-for":
				var valuev4nrdu71 string

				valuev4nrdu71, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.XForwardedFor = valuev4nrdu71

			case "content-type":
				var valuewehnl58w string

				valuewehnl58w, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.ContentType = valuewehnl58w

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (r *RequestHeaders) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("x-requested-with")
	enc.EncodeString(r.XRequestedWith)
	enc.WriteByte(',')
	enc.EncodeKey("user-agent")
	enc.EncodeString(r.UserAgent)
	enc.WriteByte(',')
	enc.EncodeKey("content-length")
	enc.EncodeInt(r.ContentLength)
	enc.WriteByte(',')
	enc.EncodeKey("x-real-ip")
	enc.EncodeString(r.XRealIP)
	enc.WriteByte(',')
	enc.EncodeKey("connection")
	enc.EncodeString(r.Connection)
	enc.WriteByte(',')
	enc.EncodeKey("accept")
	enc.EncodeString(r.Accept)
	enc.WriteByte(',')
	enc.EncodeKey("host")
	enc.EncodeString(r.Host)
	enc.WriteByte(',')
	enc.EncodeKey("referer")
	enc.EncodeString(r.Referer)
	enc.WriteByte(',')
	enc.EncodeKey("yz_client_ip")
	enc.EncodeString(r.YzClientIP)
	enc.WriteByte(',')
	enc.EncodeKey("accept-language")
	enc.EncodeString(r.AcceptLanguage)
	enc.WriteByte(',')
	enc.EncodeKey("pragma")
	enc.EncodeString(r.Pragma)
	enc.WriteByte(',')
	enc.EncodeKey("x-forwarded-for")
	enc.EncodeString(r.XForwardedFor)
	enc.WriteByte(',')
	enc.EncodeKey("content-type")
	enc.EncodeString(r.ContentType)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (r *Request) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			key8209gc9x, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch key8209gc9x {
			case "method":
				var value089gp8h7 string

				value089gp8h7, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.Method = value089gp8h7

			case "body":
				var valueqqucttw3 Body

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keyfg7v2ech, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keyfg7v2ech {
						case "content":
							var valuec8i3vhkw string

							valuec8i3vhkw, err = dec.ReadStringWithEscape()
							if err != nil {
								return err
							}

							valueqqucttw3.Content = valuec8i3vhkw

						case "bytes":
							var valuelmo8b2dx int

							valuelmo8b2dx, err = dec.ReadInt()
							if err != nil {
								return err
							}

							valueqqucttw3.Bytes = valuelmo8b2dx

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				r.Body = valueqqucttw3

			case "referrer":
				var valueo0epn56f string

				valueo0epn56f, err = dec.ReadString()
				if err != nil {
					return err
				}

				r.Referrer = valueo0epn56f

			case "bytes":
				var valueg5vqcicu int

				valueg5vqcicu, err = dec.ReadInt()
				if err != nil {
					return err
				}

				r.Bytes = valueg5vqcicu

			case "headers":
				var valuedqkw8yu9 RequestHeaders

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						key8k399v1v, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch key8k399v1v {
						case "x-real-ip":
							var value6vt845of string

							value6vt845of, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuedqkw8yu9.XRealIP = value6vt845of

						case "connection":
							var value73ie6bg2 string

							value73ie6bg2, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuedqkw8yu9.Connection = value73ie6bg2

						case "accept":
							var value9629gckz string

							value9629gckz, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuedqkw8yu9.Accept = value9629gckz

						case "x-forwarded-for":
							var valuekbrguhtp string

							valuekbrguhtp, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuedqkw8yu9.XForwardedFor = valuekbrguhtp

						case "referer":
							var value95c4gtwg string

							value95c4gtwg, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuedqkw8yu9.Referer = value95c4gtwg

						case "x-requested-with":
							var valuejf5s9537 string

							valuejf5s9537, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuedqkw8yu9.XRequestedWith = valuejf5s9537

						case "accept-language":
							var value9j24q3eo string

							value9j24q3eo, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuedqkw8yu9.AcceptLanguage = value9j24q3eo

						case "pragma":
							var value87qfdws5 string

							value87qfdws5, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuedqkw8yu9.Pragma = value87qfdws5

						case "host":
							var value7ovb032n string

							value7ovb032n, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuedqkw8yu9.Host = value7ovb032n

						case "content-type":
							var valuest102bxv string

							valuest102bxv, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuedqkw8yu9.ContentType = valuest102bxv

						case "yz_client_ip":
							var valuef4emxxub string

							valuef4emxxub, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuedqkw8yu9.YzClientIP = valuef4emxxub

						case "user-agent":
							var valuenfbo4ya6 string

							valuenfbo4ya6, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuedqkw8yu9.UserAgent = valuenfbo4ya6

						case "content-length":
							var value0c9n1l5z int

							value0c9n1l5z, err = dec.ReadInt()
							if err != nil {
								return err
							}

							valuedqkw8yu9.ContentLength = value0c9n1l5z

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				r.Headers = valuedqkw8yu9

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (r *Request) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("method")
	enc.EncodeString(r.Method)
	enc.WriteByte(',')
	enc.EncodeKey("body")
	enc.WriteByte('{')
	enc.EncodeKey("content")
	enc.EncodeString(r.Body.Content)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(r.Body.Bytes)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("referrer")
	enc.EncodeString(r.Referrer)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(r.Bytes)
	enc.WriteByte(',')
	enc.EncodeKey("headers")
	enc.WriteByte('{')
	enc.EncodeKey("x-real-ip")
	enc.EncodeString(r.Headers.XRealIP)
	enc.WriteByte(',')
	enc.EncodeKey("connection")
	enc.EncodeString(r.Headers.Connection)
	enc.WriteByte(',')
	enc.EncodeKey("accept")
	enc.EncodeString(r.Headers.Accept)
	enc.WriteByte(',')
	enc.EncodeKey("x-forwarded-for")
	enc.EncodeString(r.Headers.XForwardedFor)
	enc.WriteByte(',')
	enc.EncodeKey("referer")
	enc.EncodeString(r.Headers.Referer)
	enc.WriteByte(',')
	enc.EncodeKey("x-requested-with")
	enc.EncodeString(r.Headers.XRequestedWith)
	enc.WriteByte(',')
	enc.EncodeKey("accept-language")
	enc.EncodeString(r.Headers.AcceptLanguage)
	enc.WriteByte(',')
	enc.EncodeKey("pragma")
	enc.EncodeString(r.Headers.Pragma)
	enc.WriteByte(',')
	enc.EncodeKey("host")
	enc.EncodeString(r.Headers.Host)
	enc.WriteByte(',')
	enc.EncodeKey("content-type")
	enc.EncodeString(r.Headers.ContentType)
	enc.WriteByte(',')
	enc.EncodeKey("yz_client_ip")
	enc.EncodeString(r.Headers.YzClientIP)
	enc.WriteByte(',')
	enc.EncodeKey("user-agent")
	enc.EncodeString(r.Headers.UserAgent)
	enc.WriteByte(',')
	enc.EncodeKey("content-length")
	enc.EncodeInt(r.Headers.ContentLength)
	enc.WriteByte('}')
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (h *HTTP) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keyq5m3ctyx, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keyq5m3ctyx {
			case "response":
				var valuee5sw45xg Response

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						keyk1x1zccn, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch keyk1x1zccn {
						case "body":
							var valueda575jp8 Body

							if isNil, err := dec.AssertObject(); err != nil {
								return err
							} else if !isNil {
								for {
									keyr2nl72vs, err := dec.ReadString()
									if err != nil {
										return err
									}

									if err := dec.MustByte(':'); err != nil {
										return err
									}

									switch keyr2nl72vs {
									case "content":
										var valueaqmisf1u string

										valueaqmisf1u, err = dec.ReadStringWithEscape()
										if err != nil {
											return err
										}

										valueda575jp8.Content = valueaqmisf1u

									case "bytes":
										var value67qdp2r8 int

										value67qdp2r8, err = dec.ReadInt()
										if err != nil {
											return err
										}

										valueda575jp8.Bytes = value67qdp2r8

									default:
										if err := dec.SkipValue(); err != nil {
											return err
										}
									}
									if dec.ExpectByte('}') {
										break
									}

									if err := dec.MustByte(','); err != nil {
										return err
									}
								}
							}

							valuee5sw45xg.Body = valueda575jp8

						case "bytes":
							var valuei6tjkqgz int

							valuei6tjkqgz, err = dec.ReadInt()
							if err != nil {
								return err
							}

							valuee5sw45xg.Bytes = valuei6tjkqgz

						case "headers":
							var valuerzlhp22j ResponseHeaders

							if isNil, err := dec.AssertObject(); err != nil {
								return err
							} else if !isNil {
								for {
									keybehogqn9, err := dec.ReadString()
									if err != nil {
										return err
									}

									if err := dec.MustByte(':'); err != nil {
										return err
									}

									switch keybehogqn9 {
									case "cache-control":
										var valuetnod9q6m string

										valuetnod9q6m, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuerzlhp22j.CacheControl = valuetnod9q6m

									case "pragma":
										var valuedk2f6s28 string

										valuedk2f6s28, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuerzlhp22j.Pragma = valuedk2f6s28

									case "server":
										var valuegy14kzbp string

										valuegy14kzbp, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuerzlhp22j.Server = valuegy14kzbp

									case "date":
										var value54xnigq6 string

										value54xnigq6, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuerzlhp22j.Date = value54xnigq6

									case "content-length":
										var value72hi5m3o int

										value72hi5m3o, err = dec.ReadInt()
										if err != nil {
											return err
										}

										valuerzlhp22j.ContentLength = value72hi5m3o

									case "transfer-encoding":
										var valuen46vyqc4 string

										valuen46vyqc4, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuerzlhp22j.TransferEncoding = valuen46vyqc4

									case "connection":
										var valueu5lmil85 string

										valueu5lmil85, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuerzlhp22j.Connection = valueu5lmil85

									default:
										if err := dec.SkipValue(); err != nil {
											return err
										}
									}
									if dec.ExpectByte('}') {
										break
									}

									if err := dec.MustByte(','); err != nil {
										return err
									}
								}
							}

							valuee5sw45xg.Headers = valuerzlhp22j

						case "status_phrase":
							var value1i36cd90 string

							value1i36cd90, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuee5sw45xg.StatusPhrase = value1i36cd90

						case "status_code":
							var value3kil2qsz int

							value3kil2qsz, err = dec.ReadInt()
							if err != nil {
								return err
							}

							valuee5sw45xg.StatusCode = value3kil2qsz

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				h.Response = valuee5sw45xg

			case "version":
				var valueh8u88pwl string

				valueh8u88pwl, err = dec.ReadString()
				if err != nil {
					return err
				}

				h.Version = valueh8u88pwl

			case "request":
				var valuekcivr6gd Request

				if isNil, err := dec.AssertObject(); err != nil {
					return err
				} else if !isNil {
					for {
						key04sm7frz, err := dec.ReadString()
						if err != nil {
							return err
						}

						if err := dec.MustByte(':'); err != nil {
							return err
						}

						switch key04sm7frz {
						case "referrer":
							var value49p43ymy string

							value49p43ymy, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuekcivr6gd.Referrer = value49p43ymy

						case "bytes":
							var value9j28wokh int

							value9j28wokh, err = dec.ReadInt()
							if err != nil {
								return err
							}

							valuekcivr6gd.Bytes = value9j28wokh

						case "headers":
							var valuecilikadv RequestHeaders

							if isNil, err := dec.AssertObject(); err != nil {
								return err
							} else if !isNil {
								for {
									keym762bnl7, err := dec.ReadString()
									if err != nil {
										return err
									}

									if err := dec.MustByte(':'); err != nil {
										return err
									}

									switch keym762bnl7 {
									case "x-forwarded-for":
										var value9kegkt9g string

										value9kegkt9g, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuecilikadv.XForwardedFor = value9kegkt9g

									case "content-type":
										var valueczthbn2k string

										valueczthbn2k, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuecilikadv.ContentType = valueczthbn2k

									case "referer":
										var value40sjapzv string

										value40sjapzv, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuecilikadv.Referer = value40sjapzv

									case "x-requested-with":
										var value3tzm1rd5 string

										value3tzm1rd5, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuecilikadv.XRequestedWith = value3tzm1rd5

									case "host":
										var value71kbpbdb string

										value71kbpbdb, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuecilikadv.Host = value71kbpbdb

									case "content-length":
										var valuenqxe9lyv int

										valuenqxe9lyv, err = dec.ReadInt()
										if err != nil {
											return err
										}

										valuecilikadv.ContentLength = valuenqxe9lyv

									case "x-real-ip":
										var valuette4do45 string

										valuette4do45, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuecilikadv.XRealIP = valuette4do45

									case "pragma":
										var valueqm9mf1ur string

										valueqm9mf1ur, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuecilikadv.Pragma = valueqm9mf1ur

									case "connection":
										var value3eifxp6y string

										value3eifxp6y, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuecilikadv.Connection = value3eifxp6y

									case "accept":
										var valuem0px9kmz string

										valuem0px9kmz, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuecilikadv.Accept = valuem0px9kmz

									case "yz_client_ip":
										var value3htd0y3z string

										value3htd0y3z, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuecilikadv.YzClientIP = value3htd0y3z

									case "user-agent":
										var value4gxri6ck string

										value4gxri6ck, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuecilikadv.UserAgent = value4gxri6ck

									case "accept-language":
										var valuex2r6qf2f string

										valuex2r6qf2f, err = dec.ReadString()
										if err != nil {
											return err
										}

										valuecilikadv.AcceptLanguage = valuex2r6qf2f

									default:
										if err := dec.SkipValue(); err != nil {
											return err
										}
									}
									if dec.ExpectByte('}') {
										break
									}

									if err := dec.MustByte(','); err != nil {
										return err
									}
								}
							}

							valuekcivr6gd.Headers = valuecilikadv

						case "method":
							var valueyyv568cv string

							valueyyv568cv, err = dec.ReadString()
							if err != nil {
								return err
							}

							valuekcivr6gd.Method = valueyyv568cv

						case "body":
							var valueiedg47h6 Body

							if isNil, err := dec.AssertObject(); err != nil {
								return err
							} else if !isNil {
								for {
									keyg70xvxgt, err := dec.ReadString()
									if err != nil {
										return err
									}

									if err := dec.MustByte(':'); err != nil {
										return err
									}

									switch keyg70xvxgt {
									case "content":
										var valueorhll9ai string

										valueorhll9ai, err = dec.ReadStringWithEscape()
										if err != nil {
											return err
										}

										valueiedg47h6.Content = valueorhll9ai

									case "bytes":
										var valueozsokv8g int

										valueozsokv8g, err = dec.ReadInt()
										if err != nil {
											return err
										}

										valueiedg47h6.Bytes = valueozsokv8g

									default:
										if err := dec.SkipValue(); err != nil {
											return err
										}
									}
									if dec.ExpectByte('}') {
										break
									}

									if err := dec.MustByte(','); err != nil {
										return err
									}
								}
							}

							valuekcivr6gd.Body = valueiedg47h6

						default:
							if err := dec.SkipValue(); err != nil {
								return err
							}
						}
						if dec.ExpectByte('}') {
							break
						}

						if err := dec.MustByte(','); err != nil {
							return err
						}
					}
				}

				h.Request = valuekcivr6gd

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (h *HTTP) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("response")
	enc.WriteByte('{')
	enc.EncodeKey("body")
	enc.WriteByte('{')
	enc.EncodeKey("content")
	enc.EncodeString(h.Response.Body.Content)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(h.Response.Body.Bytes)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(h.Response.Bytes)
	enc.WriteByte(',')
	enc.EncodeKey("headers")
	enc.WriteByte('{')
	enc.EncodeKey("cache-control")
	enc.EncodeString(h.Response.Headers.CacheControl)
	enc.WriteByte(',')
	enc.EncodeKey("pragma")
	enc.EncodeString(h.Response.Headers.Pragma)
	enc.WriteByte(',')
	enc.EncodeKey("server")
	enc.EncodeString(h.Response.Headers.Server)
	enc.WriteByte(',')
	enc.EncodeKey("date")
	enc.EncodeString(h.Response.Headers.Date)
	enc.WriteByte(',')
	enc.EncodeKey("content-length")
	enc.EncodeInt(h.Response.Headers.ContentLength)
	enc.WriteByte(',')
	enc.EncodeKey("transfer-encoding")
	enc.EncodeString(h.Response.Headers.TransferEncoding)
	enc.WriteByte(',')
	enc.EncodeKey("connection")
	enc.EncodeString(h.Response.Headers.Connection)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("status_phrase")
	enc.EncodeString(h.Response.StatusPhrase)
	enc.WriteByte(',')
	enc.EncodeKey("status_code")
	enc.EncodeInt(h.Response.StatusCode)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("version")
	enc.EncodeString(h.Version)
	enc.WriteByte(',')
	enc.EncodeKey("request")
	enc.WriteByte('{')
	enc.EncodeKey("referrer")
	enc.EncodeString(h.Request.Referrer)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(h.Request.Bytes)
	enc.WriteByte(',')
	enc.EncodeKey("headers")
	enc.WriteByte('{')
	enc.EncodeKey("x-forwarded-for")
	enc.EncodeString(h.Request.Headers.XForwardedFor)
	enc.WriteByte(',')
	enc.EncodeKey("content-type")
	enc.EncodeString(h.Request.Headers.ContentType)
	enc.WriteByte(',')
	enc.EncodeKey("referer")
	enc.EncodeString(h.Request.Headers.Referer)
	enc.WriteByte(',')
	enc.EncodeKey("x-requested-with")
	enc.EncodeString(h.Request.Headers.XRequestedWith)
	enc.WriteByte(',')
	enc.EncodeKey("host")
	enc.EncodeString(h.Request.Headers.Host)
	enc.WriteByte(',')
	enc.EncodeKey("content-length")
	enc.EncodeInt(h.Request.Headers.ContentLength)
	enc.WriteByte(',')
	enc.EncodeKey("x-real-ip")
	enc.EncodeString(h.Request.Headers.XRealIP)
	enc.WriteByte(',')
	enc.EncodeKey("pragma")
	enc.EncodeString(h.Request.Headers.Pragma)
	enc.WriteByte(',')
	enc.EncodeKey("connection")
	enc.EncodeString(h.Request.Headers.Connection)
	enc.WriteByte(',')
	enc.EncodeKey("accept")
	enc.EncodeString(h.Request.Headers.Accept)
	enc.WriteByte(',')
	enc.EncodeKey("yz_client_ip")
	enc.EncodeString(h.Request.Headers.YzClientIP)
	enc.WriteByte(',')
	enc.EncodeKey("user-agent")
	enc.EncodeString(h.Request.Headers.UserAgent)
	enc.WriteByte(',')
	enc.EncodeKey("accept-language")
	enc.EncodeString(h.Request.Headers.AcceptLanguage)
	enc.WriteByte('}')
	enc.WriteByte(',')
	enc.EncodeKey("method")
	enc.EncodeString(h.Request.Method)
	enc.WriteByte(',')
	enc.EncodeKey("body")
	enc.WriteByte('{')
	enc.EncodeKey("content")
	enc.EncodeString(h.Request.Body.Content)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(h.Request.Body.Bytes)
	enc.WriteByte('}')
	enc.WriteByte('}')
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (n *Network) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keybls509ki, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keybls509ki {
			case "type":
				var valuerasytj3c string

				valuerasytj3c, err = dec.ReadString()
				if err != nil {
					return err
				}

				n.Type = valuerasytj3c

			case "transport":
				var valuew5vzibjt string

				valuew5vzibjt, err = dec.ReadString()
				if err != nil {
					return err
				}

				n.Transport = valuew5vzibjt

			case "protocol":
				var valuek51gbrjv string

				valuek51gbrjv, err = dec.ReadString()
				if err != nil {
					return err
				}

				n.Protocol = valuek51gbrjv

			case "community_id":
				var valueg9ddyzb7 string

				valueg9ddyzb7, err = dec.ReadString()
				if err != nil {
					return err
				}

				n.CommunityID = valueg9ddyzb7

			case "bytes":
				var valueplea5giu int

				valueplea5giu, err = dec.ReadInt()
				if err != nil {
					return err
				}

				n.Bytes = valueplea5giu

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (n *Network) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("type")
	enc.EncodeString(n.Type)
	enc.WriteByte(',')
	enc.EncodeKey("transport")
	enc.EncodeString(n.Transport)
	enc.WriteByte(',')
	enc.EncodeKey("protocol")
	enc.EncodeString(n.Protocol)
	enc.WriteByte(',')
	enc.EncodeKey("community_id")
	enc.EncodeString(n.CommunityID)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(n.Bytes)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (u *URL) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			key55dyycbv, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch key55dyycbv {
			case "path":
				var value9o9gsbex string

				value9o9gsbex, err = dec.ReadString()
				if err != nil {
					return err
				}

				u.Path = value9o9gsbex

			case "query":
				var value6cz3iams string

				value6cz3iams, err = dec.ReadString()
				if err != nil {
					return err
				}

				u.Query = value6cz3iams

			case "full":
				var value199achmo string

				value199achmo, err = dec.ReadString()
				if err != nil {
					return err
				}

				u.Full = value199achmo

			case "scheme":
				var valuelts7v85y string

				valuelts7v85y, err = dec.ReadString()
				if err != nil {
					return err
				}

				u.Scheme = valuelts7v85y

			case "domain":
				var valuevuglfviy string

				valuevuglfviy, err = dec.ReadString()
				if err != nil {
					return err
				}

				u.Domain = valuevuglfviy

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (u *URL) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("path")
	enc.EncodeString(u.Path)
	enc.WriteByte(',')
	enc.EncodeKey("query")
	enc.EncodeString(u.Query)
	enc.WriteByte(',')
	enc.EncodeKey("full")
	enc.EncodeString(u.Full)
	enc.WriteByte(',')
	enc.EncodeKey("scheme")
	enc.EncodeString(u.Scheme)
	enc.WriteByte(',')
	enc.EncodeKey("domain")
	enc.EncodeString(u.Domain)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (c *Client) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keyf34riffq, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keyf34riffq {
			case "bytes":
				var value6jmpp8cx int

				value6jmpp8cx, err = dec.ReadInt()
				if err != nil {
					return err
				}

				c.Bytes = value6jmpp8cx

			case "ip":
				var value3sqwcp7t string

				value3sqwcp7t, err = dec.ReadString()
				if err != nil {
					return err
				}

				c.IP = value3sqwcp7t

			case "port":
				var valuensol7hut int

				valuensol7hut, err = dec.ReadInt()
				if err != nil {
					return err
				}

				c.Port = valuensol7hut

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (c *Client) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("bytes")
	enc.EncodeInt(c.Bytes)
	enc.WriteByte(',')
	enc.EncodeKey("ip")
	enc.EncodeString(c.IP)
	enc.WriteByte(',')
	enc.EncodeKey("port")
	enc.EncodeInt(c.Port)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (e *Event) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keycwaiqofe, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keycwaiqofe {
			case "start":
				var value6ovtf5oa time.Time

				data, err := dec.ReadValueBytes()
				if err != nil {
					return err
				}

				if decoder, ok := backend.IsDecoder(&value6ovtf5oa); ok {
					if err := decoder.UnmarshalJSON(data); err != nil {
						return err
					}
				} else {
					if err := json.Unmarshal(data, &value6ovtf5oa); err != nil {
						return err
					}
				}
				e.Start = value6ovtf5oa

			case "end":
				var value471tebc5 time.Time

				data, err := dec.ReadValueBytes()
				if err != nil {
					return err
				}

				if decoder, ok := backend.IsDecoder(&value471tebc5); ok {
					if err := decoder.UnmarshalJSON(data); err != nil {
						return err
					}
				} else {
					if err := json.Unmarshal(data, &value471tebc5); err != nil {
						return err
					}
				}
				e.End = value471tebc5

			case "kind":
				var valueqw1vjh6k string

				valueqw1vjh6k, err = dec.ReadString()
				if err != nil {
					return err
				}

				e.Kind = valueqw1vjh6k

			case "category":
				var value8p7qe55m string

				value8p7qe55m, err = dec.ReadString()
				if err != nil {
					return err
				}

				e.Category = value8p7qe55m

			case "dataset":
				var value9pr5itki string

				value9pr5itki, err = dec.ReadString()
				if err != nil {
					return err
				}

				e.Dataset = value9pr5itki

			case "duration":
				var value6k10l6d5 int

				value6k10l6d5, err = dec.ReadInt()
				if err != nil {
					return err
				}

				e.Duration = value6k10l6d5

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (e *Event) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("start")
	valueauqpf395 := e.Start
	if encoder, ok := backend.IsEncoder(&valueauqpf395); ok {
		data, err := encoder.MarshalJSON()
		if err != nil {
			return nil, err
		}

		enc.Write(data)
	} else {
		data, err := json.Marshal(valueauqpf395)
		if err != nil {
			return nil, err
		}

		enc.Write(data)
	}

	enc.WriteByte(',')
	enc.EncodeKey("end")
	value686jksof := e.End
	if encoder, ok := backend.IsEncoder(&value686jksof); ok {
		data, err := encoder.MarshalJSON()
		if err != nil {
			return nil, err
		}

		enc.Write(data)
	} else {
		data, err := json.Marshal(value686jksof)
		if err != nil {
			return nil, err
		}

		enc.Write(data)
	}

	enc.WriteByte(',')
	enc.EncodeKey("kind")
	enc.EncodeString(e.Kind)
	enc.WriteByte(',')
	enc.EncodeKey("category")
	enc.EncodeString(e.Category)
	enc.WriteByte(',')
	enc.EncodeKey("dataset")
	enc.EncodeString(e.Dataset)
	enc.WriteByte(',')
	enc.EncodeKey("duration")
	enc.EncodeInt(e.Duration)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (u *UserAgent) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			key9o470f0m, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch key9o470f0m {
			case "original":
				var value6lo61kv2 string

				value6lo61kv2, err = dec.ReadString()
				if err != nil {
					return err
				}

				u.Original = value6lo61kv2

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (u *UserAgent) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("original")
	enc.EncodeString(u.Original)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (d *Destination) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keynzjpmclw, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keynzjpmclw {
			case "domain":
				var valuedy2thn29 string

				valuedy2thn29, err = dec.ReadString()
				if err != nil {
					return err
				}

				d.Domain = valuedy2thn29

			case "bytes":
				var valuebckk20br int

				valuebckk20br, err = dec.ReadInt()
				if err != nil {
					return err
				}

				d.Bytes = valuebckk20br

			case "ip":
				var value2l296e59 string

				value2l296e59, err = dec.ReadString()
				if err != nil {
					return err
				}

				d.IP = value2l296e59

			case "port":
				var valueaputa0oy int

				valueaputa0oy, err = dec.ReadInt()
				if err != nil {
					return err
				}

				d.Port = valueaputa0oy

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (d *Destination) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("domain")
	enc.EncodeString(d.Domain)
	enc.WriteByte(',')
	enc.EncodeKey("bytes")
	enc.EncodeInt(d.Bytes)
	enc.WriteByte(',')
	enc.EncodeKey("ip")
	enc.EncodeString(d.IP)
	enc.WriteByte(',')
	enc.EncodeKey("port")
	enc.EncodeInt(d.Port)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}

func (a *Agent) UnmarshalJSON(data []byte) error {
	dec := backend.NewDecoder(data, backend.WithUnsafe())
	defer backend.ReleaseDecoder(dec)

	if isNil, err := dec.AssertObject(); err != nil {
		return err
	} else if !isNil {
		for {
			keyyauleb6o, err := dec.ReadString()
			if err != nil {
				return err
			}

			if err := dec.MustByte(':'); err != nil {
				return err
			}

			switch keyyauleb6o {
			case "version":
				var valuefgnothbs string

				valuefgnothbs, err = dec.ReadString()
				if err != nil {
					return err
				}

				a.Version = valuefgnothbs

			case "type":
				var value90mrhcwp string

				value90mrhcwp, err = dec.ReadString()
				if err != nil {
					return err
				}

				a.Type = value90mrhcwp

			case "ephemeral_id":
				var valuekw9p9irm string

				valuekw9p9irm, err = dec.ReadString()
				if err != nil {
					return err
				}

				a.EphemeralID = valuekw9p9irm

			case "hostname":
				var valueejiut53t string

				valueejiut53t, err = dec.ReadString()
				if err != nil {
					return err
				}

				a.Hostname = valueejiut53t

			case "id":
				var valuej6ntvclh string

				valuej6ntvclh, err = dec.ReadString()
				if err != nil {
					return err
				}

				a.ID = valuej6ntvclh

			default:
				if err := dec.SkipValue(); err != nil {
					return err
				}
			}
			if dec.ExpectByte('}') {
				break
			}

			if err := dec.MustByte(','); err != nil {
				return err
			}
		}
	}

	return nil
}

func (a *Agent) MarshalJSON() ([]byte, error) {
	enc := backend.NewEncoder()
	defer backend.ReleaseEncoder(enc)

	enc.WriteByte('{')
	enc.EncodeKey("version")
	enc.EncodeString(a.Version)
	enc.WriteByte(',')
	enc.EncodeKey("type")
	enc.EncodeString(a.Type)
	enc.WriteByte(',')
	enc.EncodeKey("ephemeral_id")
	enc.EncodeString(a.EphemeralID)
	enc.WriteByte(',')
	enc.EncodeKey("hostname")
	enc.EncodeString(a.Hostname)
	enc.WriteByte(',')
	enc.EncodeKey("id")
	enc.EncodeString(a.ID)
	enc.WriteByte('}')
	return enc.Bytes(), nil
}
