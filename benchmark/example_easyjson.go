// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package benchmark

import (
	json "encoding/json"

	"github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark(in *jlexer.Lexer, out *UserAgent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "original":
			out.Original = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark(out *jwriter.Writer, in UserAgent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"original\":"
		out.RawString(prefix[1:])
		out.String(string(in.Original))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserAgent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserAgent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark1(in *jlexer.Lexer, out *URL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "query":
			out.Query = string(in.String())
		case "full":
			out.Full = string(in.String())
		case "scheme":
			out.Scheme = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark1(out *jwriter.Writer, in URL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix)
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"full\":"
		out.RawString(prefix)
		out.String(string(in.Full))
	}
	{
		const prefix string = ",\"scheme\":"
		out.RawString(prefix)
		out.String(string(in.Scheme))
	}
	{
		const prefix string = ",\"domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v URL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *URL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark1(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark2(in *jlexer.Lexer, out *TestStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "a":
			out.A = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark2(out *jwriter.Writer, in TestStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix[1:])
		out.String(string(in.A))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TestStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TestStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark2(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark3(in *jlexer.Lexer, out *TestLargeStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "@timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "@metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "ecs":
			(out.Ecs).UnmarshalEasyJSON(in)
		case "host":
			(out.Host).UnmarshalEasyJSON(in)
		case "server":
			(out.Server).UnmarshalEasyJSON(in)
		case "status":
			out.Status = string(in.String())
		case "source":
			(out.Source).UnmarshalEasyJSON(in)
		case "method":
			out.Method = string(in.String())
		case "http":
			(out.HTTP).UnmarshalEasyJSON(in)
		case "network":
			(out.Network).UnmarshalEasyJSON(in)
		case "url":
			(out.URL).UnmarshalEasyJSON(in)
		case "client":
			(out.Client).UnmarshalEasyJSON(in)
		case "event":
			(out.Event).UnmarshalEasyJSON(in)
		case "query":
			out.Query = string(in.String())
		case "user_agent":
			(out.UserAgent).UnmarshalEasyJSON(in)
		case "destination":
			(out.Destination).UnmarshalEasyJSON(in)
		case "type":
			out.Type = string(in.String())
		case "agent":
			(out.Agent).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark3(out *jwriter.Writer, in TestLargeStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"@timestamp\":"
		out.RawString(prefix[1:])
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"@metadata\":"
		out.RawString(prefix)
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ecs\":"
		out.RawString(prefix)
		(in.Ecs).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		(in.Host).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"server\":"
		out.RawString(prefix)
		(in.Server).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		(in.Source).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"http\":"
		out.RawString(prefix)
		(in.HTTP).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"network\":"
		out.RawString(prefix)
		(in.Network).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		(in.URL).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"client\":"
		out.RawString(prefix)
		(in.Client).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		(in.Event).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix)
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"user_agent\":"
		out.RawString(prefix)
		(in.UserAgent).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"destination\":"
		out.RawString(prefix)
		(in.Destination).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"agent\":"
		out.RawString(prefix)
		(in.Agent).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TestLargeStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TestLargeStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark3(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark4(in *jlexer.Lexer, out *Source) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bytes":
			out.Bytes = int(in.Int())
		case "ip":
			out.IP = string(in.String())
		case "port":
			out.Port = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark4(out *jwriter.Writer, in Source) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bytes\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Bytes))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Source) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Source) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark4(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark5(in *jlexer.Lexer, out *SmallPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "st":
			out.St = int(in.Int())
		case "sid":
			out.Sid = int(in.Int())
		case "tt":
			out.Tt = string(in.String())
		case "gr":
			out.Gr = int(in.Int())
		case "uuid":
			out.Uuid = string(in.String())
		case "ip":
			out.Ip = string(in.String())
		case "ua":
			out.Ua = string(in.String())
		case "tz":
			out.Tz = int(in.Int())
		case "v":
			out.V = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark5(out *jwriter.Writer, in SmallPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"st\":"
		out.RawString(prefix[1:])
		out.Int(int(in.St))
	}
	{
		const prefix string = ",\"sid\":"
		out.RawString(prefix)
		out.Int(int(in.Sid))
	}
	{
		const prefix string = ",\"tt\":"
		out.RawString(prefix)
		out.String(string(in.Tt))
	}
	{
		const prefix string = ",\"gr\":"
		out.RawString(prefix)
		out.Int(int(in.Gr))
	}
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix)
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.Ip))
	}
	{
		const prefix string = ",\"ua\":"
		out.RawString(prefix)
		out.String(string(in.Ua))
	}
	{
		const prefix string = ",\"tz\":"
		out.RawString(prefix)
		out.Int(int(in.Tz))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.Int(int(in.V))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SmallPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SmallPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark5(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark6(in *jlexer.Lexer, out *Server) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.IP = string(in.String())
		case "port":
			out.Port = int(in.Int())
		case "domain":
			out.Domain = string(in.String())
		case "bytes":
			out.Bytes = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark6(out *jwriter.Writer, in Server) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	{
		const prefix string = ",\"bytes\":"
		out.RawString(prefix)
		out.Int(int(in.Bytes))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Server) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Server) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark6(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark7(in *jlexer.Lexer, out *ResponseHeaders) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content-length":
			out.ContentLength = int(in.Int())
		case "transfer-encoding":
			out.TransferEncoding = string(in.String())
		case "connection":
			out.Connection = string(in.String())
		case "cache-control":
			out.CacheControl = string(in.String())
		case "pragma":
			out.Pragma = string(in.String())
		case "server":
			out.Server = string(in.String())
		case "date":
			out.Date = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark7(out *jwriter.Writer, in ResponseHeaders) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"content-length\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ContentLength))
	}
	{
		const prefix string = ",\"transfer-encoding\":"
		out.RawString(prefix)
		out.String(string(in.TransferEncoding))
	}
	{
		const prefix string = ",\"connection\":"
		out.RawString(prefix)
		out.String(string(in.Connection))
	}
	{
		const prefix string = ",\"cache-control\":"
		out.RawString(prefix)
		out.String(string(in.CacheControl))
	}
	{
		const prefix string = ",\"pragma\":"
		out.RawString(prefix)
		out.String(string(in.Pragma))
	}
	{
		const prefix string = ",\"server\":"
		out.RawString(prefix)
		out.String(string(in.Server))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseHeaders) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseHeaders) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark7(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark8(in *jlexer.Lexer, out *Body) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content":
			out.Content = string(in.String())
		case "bytes":
			out.Bytes = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark8(out *jwriter.Writer, in Body) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix[1:])
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"bytes\":"
		out.RawString(prefix)
		out.Int(int(in.Bytes))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Body) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Body) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark8(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark9(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status_code":
			out.StatusCode = int(in.Int())
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		case "bytes":
			out.Bytes = int(in.Int())
		case "headers":
			(out.Headers).UnmarshalEasyJSON(in)
		case "status_phrase":
			out.StatusPhrase = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark9(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status_code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StatusCode))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		(in.Body).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"bytes\":"
		out.RawString(prefix)
		out.Int(int(in.Bytes))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		(in.Headers).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"status_phrase\":"
		out.RawString(prefix)
		out.String(string(in.StatusPhrase))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark9(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark10(in *jlexer.Lexer, out *RequestHeaders) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "referer":
			out.Referer = string(in.String())
		case "x-requested-with":
			out.XRequestedWith = string(in.String())
		case "yz_client_ip":
			out.YzClientIP = string(in.String())
		case "user-agent":
			out.UserAgent = string(in.String())
		case "accept-language":
			out.AcceptLanguage = string(in.String())
		case "content-length":
			out.ContentLength = int(in.Int())
		case "x-real-ip":
			out.XRealIP = string(in.String())
		case "pragma":
			out.Pragma = string(in.String())
		case "connection":
			out.Connection = string(in.String())
		case "accept":
			out.Accept = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "x-forwarded-for":
			out.XForwardedFor = string(in.String())
		case "content-type":
			out.ContentType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark10(out *jwriter.Writer, in RequestHeaders) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"referer\":"
		out.RawString(prefix[1:])
		out.String(string(in.Referer))
	}
	{
		const prefix string = ",\"x-requested-with\":"
		out.RawString(prefix)
		out.String(string(in.XRequestedWith))
	}
	{
		const prefix string = ",\"yz_client_ip\":"
		out.RawString(prefix)
		out.String(string(in.YzClientIP))
	}
	{
		const prefix string = ",\"user-agent\":"
		out.RawString(prefix)
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"accept-language\":"
		out.RawString(prefix)
		out.String(string(in.AcceptLanguage))
	}
	{
		const prefix string = ",\"content-length\":"
		out.RawString(prefix)
		out.Int(int(in.ContentLength))
	}
	{
		const prefix string = ",\"x-real-ip\":"
		out.RawString(prefix)
		out.String(string(in.XRealIP))
	}
	{
		const prefix string = ",\"pragma\":"
		out.RawString(prefix)
		out.String(string(in.Pragma))
	}
	{
		const prefix string = ",\"connection\":"
		out.RawString(prefix)
		out.String(string(in.Connection))
	}
	{
		const prefix string = ",\"accept\":"
		out.RawString(prefix)
		out.String(string(in.Accept))
	}
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"x-forwarded-for\":"
		out.RawString(prefix)
		out.String(string(in.XForwardedFor))
	}
	{
		const prefix string = ",\"content-type\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestHeaders) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestHeaders) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark10(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark11(in *jlexer.Lexer, out *Body) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content":
			out.Content = string(in.String())
		case "bytes":
			out.Bytes = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark11(out *jwriter.Writer, in Body) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix[1:])
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"bytes\":"
		out.RawString(prefix)
		out.Int(int(in.Bytes))
	}
	out.RawByte('}')
}

func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark12(in *jlexer.Lexer, out *Request) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "referrer":
			out.Referrer = string(in.String())
		case "bytes":
			out.Bytes = int(in.Int())
		case "headers":
			(out.Headers).UnmarshalEasyJSON(in)
		case "method":
			out.Method = string(in.String())
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark12(out *jwriter.Writer, in Request) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"referrer\":"
		out.RawString(prefix[1:])
		out.String(string(in.Referrer))
	}
	{
		const prefix string = ",\"bytes\":"
		out.RawString(prefix)
		out.Int(int(in.Bytes))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		(in.Headers).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Request) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Request) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark12(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark13(in *jlexer.Lexer, out *Network) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "transport":
			out.Transport = string(in.String())
		case "protocol":
			out.Protocol = string(in.String())
		case "community_id":
			out.CommunityID = string(in.String())
		case "bytes":
			out.Bytes = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark13(out *jwriter.Writer, in Network) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"transport\":"
		out.RawString(prefix)
		out.String(string(in.Transport))
	}
	{
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		out.String(string(in.Protocol))
	}
	{
		const prefix string = ",\"community_id\":"
		out.RawString(prefix)
		out.String(string(in.CommunityID))
	}
	{
		const prefix string = ",\"bytes\":"
		out.RawString(prefix)
		out.Int(int(in.Bytes))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Network) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Network) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark13(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark14(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "beat":
			out.Beat = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "topic":
			out.Topic = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark14(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"beat\":"
		out.RawString(prefix[1:])
		out.String(string(in.Beat))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark14(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark14(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark15(in *jlexer.Lexer, out *MediumPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "person":
			if in.IsNull() {
				in.Skip()
				out.Person = nil
			} else {
				if out.Person == nil {
					out.Person = new(CBPerson)
				}
				(*out.Person).UnmarshalEasyJSON(in)
			}
		case "company":
			out.Company = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark15(out *jwriter.Writer, in MediumPayload) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Person != nil {
		const prefix string = ",\"person\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Person).MarshalEasyJSON(out)
	}
	if in.Company != "" {
		const prefix string = ",\"company\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Company))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MediumPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark15(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MediumPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark15(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark16(in *jlexer.Lexer, out *LargePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make(DSUsers, 0, 8)
					} else {
						out.Users = DSUsers{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *DSUser
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(DSUser)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Users = append(out.Users, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				if out.Topics == nil {
					out.Topics = new(DSTopicsList)
				}
				(*out.Topics).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark16(out *jwriter.Writer, in LargePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Users {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Topics != nil {
		const prefix string = ",\"topics\":"
		out.RawString(prefix)
		(*in.Topics).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LargePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark16(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LargePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark16(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark17(in *jlexer.Lexer, out *Host) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark17(out *jwriter.Writer, in Host) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Host) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark17(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Host) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark17(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark18(in *jlexer.Lexer, out *HTTP) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "response":
			(out.Response).UnmarshalEasyJSON(in)
		case "version":
			out.Version = string(in.String())
		case "request":
			(out.Request).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark18(out *jwriter.Writer, in HTTP) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"response\":"
		out.RawString(prefix[1:])
		(in.Response).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		(in.Request).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HTTP) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark18(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HTTP) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark18(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark19(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = int(in.Int())
		case "start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Start).UnmarshalJSON(data))
			}
		case "end":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.End).UnmarshalJSON(data))
			}
		case "kind":
			out.Kind = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "dataset":
			out.Dataset = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark19(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		out.Raw((in.Start).MarshalJSON())
	}
	{
		const prefix string = ",\"end\":"
		out.RawString(prefix)
		out.Raw((in.End).MarshalJSON())
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"dataset\":"
		out.RawString(prefix)
		out.String(string(in.Dataset))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark19(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark19(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark20(in *jlexer.Lexer, out *Ecs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark20(out *jwriter.Writer, in Ecs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ecs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark20(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ecs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark20(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark21(in *jlexer.Lexer, out *Destination) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.IP = string(in.String())
		case "port":
			out.Port = int(in.Int())
		case "domain":
			out.Domain = string(in.String())
		case "bytes":
			out.Bytes = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark21(out *jwriter.Writer, in Destination) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	{
		const prefix string = ",\"bytes\":"
		out.RawString(prefix)
		out.Int(int(in.Bytes))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Destination) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark21(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Destination) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark21(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark22(in *jlexer.Lexer, out *DSUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark22(out *jwriter.Writer, in DSUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DSUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark22(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DSUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark22(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark23(in *jlexer.Lexer, out *DSTopicsList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make(DSTopics, 0, 8)
					} else {
						out.Topics = DSTopics{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *DSTopic
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(DSTopic)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Topics = append(out.Topics, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "more_topics_url":
			out.MoreTopicsUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark23(out *jwriter.Writer, in DSTopicsList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topics\":"
		out.RawString(prefix[1:])
		if in.Topics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Topics {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"more_topics_url\":"
		out.RawString(prefix)
		out.String(string(in.MoreTopicsUrl))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DSTopicsList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark23(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DSTopicsList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark23(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark24(in *jlexer.Lexer, out *DSTopic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "slug":
			out.Slug = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark24(out *jwriter.Writer, in DSTopic) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"slug\":"
		out.RawString(prefix)
		out.String(string(in.Slug))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DSTopic) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark24(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DSTopic) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark24(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark25(in *jlexer.Lexer, out *Client) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bytes":
			out.Bytes = int(in.Int())
		case "ip":
			out.IP = string(in.String())
		case "port":
			out.Port = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark25(out *jwriter.Writer, in Client) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bytes\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Bytes))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Client) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark25(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Client) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark25(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark26(in *jlexer.Lexer, out *CBPerson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(CBName)
				}
				(*out.Name).UnmarshalEasyJSON(in)
			}
		case "github":
			if in.IsNull() {
				in.Skip()
				out.Github = nil
			} else {
				if out.Github == nil {
					out.Github = new(CBGithub)
				}
				(*out.Github).UnmarshalEasyJSON(in)
			}
		case "gravatar":
			if in.IsNull() {
				in.Skip()
				out.Gravatar = nil
			} else {
				if out.Gravatar == nil {
					out.Gravatar = new(CBGravatar)
				}
				(*out.Gravatar).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark26(out *jwriter.Writer, in CBPerson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			(*in.Name).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"github\":"
		out.RawString(prefix)
		if in.Github == nil {
			out.RawString("null")
		} else {
			(*in.Github).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"gravatar\":"
		out.RawString(prefix)
		if in.Gravatar == nil {
			out.RawString("null")
		} else {
			(*in.Gravatar).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CBPerson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark26(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CBPerson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark26(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark27(in *jlexer.Lexer, out *CBName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fullName":
			out.FullName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark27(out *jwriter.Writer, in CBName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fullName\":"
		out.RawString(prefix[1:])
		out.String(string(in.FullName))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CBName) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark27(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CBName) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark27(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark28(in *jlexer.Lexer, out *CBGravatar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avatars":
			if in.IsNull() {
				in.Skip()
				out.Avatars = nil
			} else {
				in.Delim('[')
				if out.Avatars == nil {
					if !in.IsDelim(']') {
						out.Avatars = make(Avatars, 0, 8)
					} else {
						out.Avatars = Avatars{}
					}
				} else {
					out.Avatars = (out.Avatars)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *CBAvatar
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(CBAvatar)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Avatars = append(out.Avatars, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark28(out *jwriter.Writer, in CBGravatar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"avatars\":"
		out.RawString(prefix[1:])
		if in.Avatars == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Avatars {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CBGravatar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark28(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CBGravatar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark28(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark29(in *jlexer.Lexer, out *CBGithub) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "followers":
			out.Followers = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark29(out *jwriter.Writer, in CBGithub) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"followers\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Followers))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CBGithub) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark29(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CBGithub) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark29(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark30(in *jlexer.Lexer, out *CBAvatar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark30(out *jwriter.Writer, in CBAvatar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CBAvatar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark30(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CBAvatar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark30(l, v)
}
func easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark31(in *jlexer.Lexer, out *Agent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hostname":
			out.Hostname = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "ephemeral_id":
			out.EphemeralID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark31(out *jwriter.Writer, in Agent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hostname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"ephemeral_id\":"
		out.RawString(prefix)
		out.String(string(in.EphemeralID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Agent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEeca4a30EncodeGithubComGoFishGojsonBenchmark31(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Agent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEeca4a30DecodeGithubComGoFishGojsonBenchmark31(l, v)
}